import { app, BrowserWindow, ipcMain } from 'electron';
import fontkit from 'fontkit';
import glob from 'glob';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.handle('font-families', async (e): Promise<Map<string, Font[]>> => await getFontFamilies());

class FontFactory implements Font {
  subfamilyName: string;
  availableFeatures: string[];
  constructor(fullName: string, availableFeatures: string[]) {
    this.subfamilyName = fullName;
    this.availableFeatures = availableFeatures;
  }
}

function getSystemFontFolder(): string {
  const platform = process.platform;
  let folder: string;
  switch (platform) {
    case 'win32':
      folder = 'C:/Windows/Fonts';
      break;
    case 'darwin':
      folder = '$HOME/Library/Fonts';
      break;
    case 'linux':
      folder = '/usr/share/fonts';
      break;
    default:
      console.log(platform);
      folder = '';
  }
  return folder;
}

async function getFonts(): Promise<fontkit.Font[]> {
  const fonts: fontkit.Font[] = [];
  const folder = getSystemFontFolder();

  if (folder) {
    // not bothering with path.join since glob requires forward slashes anyway
    const paths = await glob(`${folder}/*.{ttf,otf,woff,woff2}`);
    await Promise.all(paths.map(async (element) => {
      try {
        let font = await fontkit.open(element);
        fonts.push(font);
      }
      catch (e) {
        console.log(element);
        console.log(e);
      }
    }));
  }

  fonts.sort((a, b) => a.familyName.localeCompare(b.familyName));
  return fonts;
}

async function getFontFamilies(): Promise<Map<string, Font[]>> {
  const fonts = await getFonts();
  const families: Map<string, Font[]> = new Map();
  fonts.forEach(element => {
    if (!families.has(element.familyName)) {
      families.set(element.familyName, [])
    }
    families.get(element.familyName)?.push(new FontFactory(element.subfamilyName, element.availableFeatures));
  });
  families.forEach(element => {
    element.sort((a, b) => a.subfamilyName.localeCompare(b.subfamilyName));
  });
  return families;
}
