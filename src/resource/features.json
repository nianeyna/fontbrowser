{
  "aalt": {
    "friendlyName": "Access All Alternates",
    "registeredBy": "Adobe",
    "function": "This feature makes all variations of a selected character accessible. This serves several purposes: An application may not support the feature by which the desired glyph would normally be accessed; the user may need a glyph outside the context supported by the normal substitution, or the user may not know what feature produces the desired glyph. Since many-to-one substitutions are not covered, ligatures would not appear in this table unless they were variant forms of another ligature.",
    "example": "A user inputs the P in Poetica, and is presented with a choice of the four standard capital forms, the eight swash capital forms, the initial capital form and the small capital form.",
    "implementation": "The 'aalt' table groups glyphs into semantic units. These units include the glyph which represents the default form for the underlying Unicode value stored by the application. While many of these substitutions are one-to-one (GSUB lookup type 1), others require a selection from a set (GSUB lookup type 3). The manufacturer may choose to build two tables (one for each lookup type) or only one which uses lookup type 3 for all substitutions. As in any one-from-many substitution, alternates present in more than one face should be ordered consistently across a family, so that those alternates can work correctly when switching between family members. This feature should be ordered first in the font, to take precedence over other features.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. The application determines the glyph ID for the default form of a given character (default glyph from the 'cmap' table with no features applied). It then checks to see whether the glyph ID is found in the 'aalt' coverage table. If so, the application retrieves the alternate glyphs mapped in the alternate substitution lookup.",
    "suggestion": "The application should indicate to the user which glyphs in the user’s document have alternative forms (i.e which are in the coverage table for 'aalt'), and provide some means for the user to select an alternate glyph. An application could display the forms sequentially in context, or present a palette showing all the forms at once, or give the user a choice between these approaches. The application may assume that the first glyph in a set is the preferred form, so the font developer should order them accordingly. When only one alternate exists, this feature could toggle directly between the alternate and default forms.",
    "sensitivity": "None.",
    "interaction": "This feature may be used in combination with other features."
  },
  "abvf": {
    "friendlyName": "Above-base Forms",
    "registeredBy": "Microsoft",
    "function": "Substitutes the above-base form of a vowel. In particular, this feature is used for certain “split” vowels in Khmer or other Brahmi-derived scripts if the character has separate components that appear before and above a consonant, but the Unicode character for the vowel does not have a decomposition into separate characters for the two components.",
    "example": "In Khmer script, U+17BE KHMER VOWEL SIGN OE must be split into a pre-base form and an above-base form. The above-base form of OE would be substituted to form the correct piece of the vowel that is displayed above the base consonant.",
    "implementation": "This feature is used to map the default glyph for OE to a glyph for the above-base component (GSUB lookup type 1).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct display of Khmer script. It should be applied in the appropriate contexts, as determined by script-specific processing requirements. In particular, in a cluster in which the applicable split vowel is used, the application must insert the pre-base glyph into the correct location and then apply the above-base form feature to the split vowel.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Khmer script. May also be used for other Brahmi-derived scripts.",
    "interaction": "This feature overrides the results of all other features."
  },
  "abvm": {
    "friendlyName": "Above-base Mark Positioning",
    "registeredBy": "Microsoft",
    "function": "Positions marks above base glyphs.",
    "example": "In complex scripts like Devanagari (Indic), the Anuswar needs to be positioned above the base glyph. This base glyph can be a base consonant or conjunct. The base glyph and the presence/absence of other marks above the base glyph decides the location of the Anuswar, so that they do not overlap each other.",
    "implementation": "The 'abvm' table provides positioning information (x,y) to enable mark positioning (GPOS lookup type 4, 5).",
    "interface": "In recommended usage, this feature triggers positioning of mark glyphs required for correct display of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Indic or other Brahmi-derived scripts.",
    "interaction": "Can be used to position default marks; or those that have been selected from a number of alternates based on contextual requirement using a feature like 'abvs'."
  },
  "abvs": {
    "friendlyName": "Above-base Substitutions",
    "registeredBy": "Microsoft",
    "function": "Substitutes a ligature for a base glyph and mark that’s above it.",
    "example": "In complex scripts like Kannada (Indic), the vowel sign for the vowel I which a mark, is positioned above base consonants. This mark combines with the consonant Ga to form a ligature.",
    "implementation": "The 'abvs' feature is used to map consonant vowel sequences to corresponding ligature glyphs (GSUB lookup type 4).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct display of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Indic or other Brahmi-derived scripts.",
    "interaction": "None"
  },
  "afrc": {
    "friendlyName": "Alternative Fractions",
    "registeredBy": "Microsoft",
    "function": "Replaces figures separated by a slash with an alternative form.",
    "example": "The user enters 3/4 in a recipe and get the threequarters nut fraction.",
    "implementation": "Sequences of glyphs for figures (digits) separated by a slash (U+002F) or fraction slash (U+2044) are mapped to a corresponding ligature glyph for the fraction (GSUB lookup type 4).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. The application applies the feature to a complete sequence of figures separated by slash (U+002F) or fraction slash (U+2044).",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "None.",
    "interaction": "This feature overrides the results of all other features."
  },
  "akhn": {
    "friendlyName": "Akhand",
    "registeredBy": "Microsoft",
    "function": "Preferentially substitutes default glyphs for a sequence of characters with a ligature. This substitution is done irrespective of any characters that may precede or follow the sequence.",
    "example": "In Devanagari script, the form Kssa is considered an Akhand character (meaning unbreakable), and the sequence Ka, Halant, Ssa should always produce the ligature Kssa, irrespective of characters that precede/follow the above given sequence.",
    "implementation": "This feature is used to map sequences that form Akhands to the corresponding ligature glyph (GSUB lookup type 4).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct display of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Indic or other Brahmi-derived scripts.",
    "interaction": "This feature is used in conjunction with certain other features to derive required forms of Indic scripts. The application is expected to process this feature and certain other features in an appropriate order to obtain the correct set of basic forms: 'nukt', 'akhn', 'rphf', 'rkrf', 'pref', 'blwf', 'half', 'pstf', 'cjct'. Other discretionary features for optional typographic effects may also be applied. Lookups for such discretionary features should be processed after lookups for this feature have been processed."
  },
  "blwf": {
    "friendlyName": "Below-base Forms",
    "registeredBy": "Microsoft",
    "function": "Substitutes the below-base form of a consonant in conjuncts.",
    "example": "In complex scripts like Oriya (Indic), the consonant Va has a below-base form that is used to generate conjuncts. Given a sequence Gha, Virama (Halant), Va; the below-base form of Va would be substituted to form the conjunct GhVa.",
    "implementation": "This feature is used to map a virama (halant) plus consonant sequence to the glyph for the below base form of the consonant (GSUB lookup type 4).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct display of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for many Indic or other Brahmi-derived scripts.",
    "interaction": "This feature is used in conjunction with certain other features to derive required forms of Indic and Indic-related scripts. For Indic scripts, the application is expected to process this feature and certain other features in an appropriate order to obtain the correct set of basic forms: 'nukt', 'akhn', 'rphf', 'rkrf', 'pref', 'blwf', 'half', 'pstf', 'cjct'. Other discretionary features for optional typographic effects may also be applied. Lookups for such discretionary features should be processed after lookups for this feature have been processed."
  },
  "blwm": {
    "friendlyName": "Below-base Mark Positioning",
    "registeredBy": "Microsoft",
    "function": "Positions marks below base glyphs.",
    "example": "In complex scripts like Gujarati (Indic), the vowel sign U needs to be positioned below base consonant/conjuncts that form the base glyph. This position can vary depending on the base glyph, as well as the presence/absence of other marks below the base glyph.",
    "implementation": "The 'blwm' table provides positioning information (x,y) to enable mark positioning (GPOS lookup type 4, 5).",
    "interface": "In recommended usage, this feature triggers positioning of mark glyphs required for correct display of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Indic or other Brahmi-derived scripts.",
    "interaction": "Can be used to position default marks; or those that have been selected from a number of alternates based on contextual requirement using a feature like 'blws'."
  },
  "blws": {
    "friendlyName": "Below-base Substitutions",
    "registeredBy": "Microsoft",
    "function": "Produces ligatures that comprise of base glyph and below-base forms.",
    "example": "In the Malayalam script (Indic), the conjunct Kla, requires a ligature which is formed using the base glyph Ka and the below-base form of consonant La. This feature can also be used to substitute ligatures formed using base glyphs and below base matras in Indic scripts.",
    "implementation": "The 'blws' feature is used to map consonant conjunct sequences or consonant vowel sequences to corresponding ligature glyphs (GSUB lookup type 4).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct display of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Indic or other Brahmi-derived scripts.",
    "interaction": "This feature overrides the results of all other features."
  },
  "calt": {
    "friendlyName": "Contextual Alternates",
    "registeredBy": "Adobe",
    "function": "In specified situations, replaces default glyphs with alternate forms which provide better joining behavior. Used in script typefaces which are designed to have some or all of their glyphs join.",
    "example": "In Caflisch Script, o is replaced by o.alt2 when followed by an ascending letterform.",
    "implementation": "The 'calt' table specifies the context in which each substitution occurs, and maps one or more default glyphs to replacement glyphs (GSUB lookup type 6).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature should be active by default.",
    "sensitivity": "Can be used with scripts that have optional, cursive styles.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override."
  },
  "case": {
    "friendlyName": "Case-Sensitive Forms",
    "registeredBy": "Adobe",
    "function": "Shifts various punctuation marks up to a position that works better with all-capital sequences or sets of lining figures; also changes oldstyle figures to lining figures. By default, glyphs in a text face are designed to work with lowercase characters. Some characters should be shifted vertically to fit the higher visual center of all-capital or lining text. Also, lining figures are the same height (or close to it) as capitals, and fit much better with all-capital text.",
    "example": "The user selects a block of text and applies this feature. The dashes, bracketing characters, guillemet quotes and the like shift up to match the capitals, and oldstyle figures change to lining figures.",
    "implementation": "The font may implement this change by substituting different glyphs (GSUB lookup type 1) or by repositioning the original glyphs (GPOS lookup type 1, XPlacement and YPlacement).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "It would be good to apply this feature (or turn it off) automatically when the user changes case on a sequence of more than one character. Applications could also detect words consisting only of capitals, and apply this feature based on user preference settings.",
    "sensitivity": "Applies only to European scripts; particularly prominent in Spanish-language setting.",
    "interaction": "This feature overrides the results of other features affecting the figures (e.g. 'onum' and 'tnum')."
  },
  "ccmp": {
    "friendlyName": "Glyph Composition/Decomposition",
    "registeredBy": "Microsoft",
    "function": "To minimize the number of glyph alternates, it is sometimes desirable to decompose the default glyph for a character into two or more glyphs. Additionally, it may be preferable to compose default glyphs for two or more characters into a single glyph for better glyph processing. This feature permits such composition/decomposition. The feature should be processed as the first feature processed, and should be processed only when it is called.",
    "example": "In Syriac, the character 0x0732 is a combining mark that has a dot above AND a dot below the base character. To avoid multiple glyph variants to fit all base glyphs, the default glyph for the character is decomposed into two glyphs: a dot above and a dot below. These two glyphs can then be correctly placed using GPOS. In Arabic it might be preferred to combine the shadda with fatha (0x0651, 0x064E) into a ligature before processing shapes. This allows the font vendor to do special handling of the mark combination when doing further processing without requiring larger contextual rules.",
    "implementation": "Glyphs for multiple characters are mapped to a single glyph (GSUB lookup type 4), or the glyph for a character is mapped to a sequence of glyphs (GSUB lookup type 2).",
    "interface": "This feature should always be applied.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "None.",
    "interaction": "This feature needs to be implemented prior to any other feature."
  },
  "cfar": {
    "friendlyName": "Conjunct Form After Ro",
    "registeredBy": "Microsoft",
    "function": "Substitutes alternate below-base or post-base forms in Khmer script when occurring after conjoined Ro (“Coeng Ra”).<br/><br/>In Khmer script, the conjoined form of Ro is reordered to the left of the base consonant. It wraps under the base consonant, however, and so can interact typographically with below-base or post-base conjoined consonant and vowel forms. After the application has reordered the glyph for the conjoined Ro, it is no longer in the immediate context of glyphs for below-base or post-base forms. The application can detect this and apply this feature over the range for the below-base and post-base conjoining forms, triggering lookups to substitute alternate below-base or past-base forms as may be needed.",
    "example": "In the Khmer script, Coeng Ro is denoted by a pre-base conjoining form, and Coeng Yo is denoted by a post-base conjoining form, but in both cases part of the form wraps under the base. The consonant cluster TRYo is denoted with an alternate form of Coeng Ya that descends lower so that it does not collide below the base with the Coeng Ro.",
    "implementation": "The 'cfar' table maps below-base or post-base conjoining form into an alternate form (GSUB lookup type 1).",
    "interface": "In recommended usage, this feature triggers substitutions that are required for correct display of Khmer script. It should be applied in the appropriate contexts, as determined by script-specific processing requirements. In particular, the application is expected to apply this feature if a syllable contains a Coeng Ra followed by other conjoining consonants or vowels.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Khmer script.",
    "interaction": "This feature is used in conjunction with certain other features to derive required forms of Khmer script. Other discretionary features for optional typographic effects may also be applied. Lookups for such discretionary features should be processed after lookups for this feature have been processed."
  },
  "chws": {
    "friendlyName": "Contextual Half-width Spacing",
    "registeredBy": "Adobe/W3C",
    "function": "Contextually re-spaces glyphs designed to be set on full-em widths, fitting them onto individual half-em horizontal widths, to approximate more sophisticated text layout, such as what is described in Requirements for Japanese Text Layout (JLREQ) or similar CJK text-layout specifications that expect half-width forms of characters whose default glyphs are full-width.* This feature differs from 'halt' in that the re-spacing is contextual. This feature may be invoked to get better fit for punctuation or symbol glyphs without disrupting the monospaced alignment, such as for UIs or terminal apps.<br/><br/>* In JLREQ, see, in particular, 3.1.4 Positioning of Consecutive Opening Brackets, Closing Brackets, Commas, Full Stops and Middle Dots and B. Spacing between Characters. See also Requirements for Chinese Text Layout (CLREQ), Requirements for Hangul Text Layout (KLREQ).",
    "example": "When FULLWIDTH RIGHT PARENTHESIS (U+FF09; “）”) is followed by IDEOGRAPHIC COMMA (U+3001; “、”), the former is re-spaced to remove half-em of width between them.",
    "implementation": "The font stores a set of adjustments for pairs of glyphs (GPOS lookup type 2 or 8, , XPlacement, XAdvance, YPlacement, and YAdvance). These may be stored as one or more tables matching left and right classes, and/or as individual pairs. Additional adjustments may be provided for larger sets of glyphs (e.g. triplets, quadruplets, etc.) to overwrite the results of pair kerns in particular combinations.<br/><br/>Note: When using a GPOS type 2 lookup for this feature, it is recommended that no positioning adjustment be applied to the second glyph in a pair. (That is, that valueFormat2 be set to 0.) As a result, the next glyph pair to be processed after the lookup has been applied to this pair will start at the second glyph. In this way, every glyph in a sequence can undergo positioning adjustment as the first glyph in a pair. Otherwise, if positioning of the second glyph is adjusted, then the next glyph pair to be processed will begin with the glyph following the second glyph. That will result in spacing adjustment happening only for every other pair of glyphs.",
    "interface": "If a layout engine supports advanced layout for CJK text as described in CLREQ, JLREQ or KLREQ, this feature should not be used. Otherwise, this feature should always be applied in horizontal layout of CJK text.",
    "suggestion": "This feature should not be used in combination with a layout engine that independently provides advanced layout as described in CLREQ, JLREQ or KLREQ. For applications that provide such advanced layout, it may appropriate not to expose control of this feature to users. In applications that do not support such advanced layout, this feature should be enabled by default for horizontal layout of CJK text.",
    "sensitivity": "Used mostly in CJKV fonts.",
    "interaction": "This feature is mutually exclusive with all other glyph-width features (e.g., 'fwid', 'halt', 'hwid', 'palt', 'pwid', 'qwid', 'twid'), which should be turned off when this feature is applied. It deactivates the 'kern' feature. See also 'vchw'."
  },
  "cjct": {
    "friendlyName": "Conjunct Forms",
    "registeredBy": "Microsoft",
    "function": "Produces conjunct forms of consonants in Indic scripts. This is similar to the Akhands feature, but is applied at a different sequential point in the process of shaping an Indic syllable.<br/><br/>Indic scripts are associated with conjoining-consonant behaviors, such as the use of “half” forms. Some consonants may not have half forms and not exhibit conjoining behavior when combined with certain consonants, yet may conjoin as ligature forms with other consonants. Whether a given pair of consonants conjoins may impact other shaping behaviors for a syllable, such as where a reordering vowel mark or reph is placed. The Conjunct Forms feature can be used at a point in the shaping process immediately before final reordering such that the application can determine whether a reordering vowel or reph is placed in relation to the consonants.<br/><br/>More generally, the Akhands feature and Conjunct Forms feature can be used at two points in the shaping of an Indic syllable, together with other features such as Half Forms and Below Forms applied in between, providing the font developer with flexibility in how the shapes for Indic syllables are derived from the default glyphs for the character sequence.",
    "example": "In Hindi (Devanagari script), the consonant cluster DGa is denoted with a conjunct ligature form.",
    "implementation": "A glyph for a consonant conjunct form is mapped from a sequence of two or more glyphs for consonants separated by virama (halant) (e.g., C H C, or C H C H C, etc.); or from sequences of glyphs involving simpler consonant conjuncts or conjoining consonant forms resulting from earlier substitutions from default consonant + virama + consonant (+ etc.) sequences (GSUB lookup type 4).",
    "interface": "In recommended usage, this feature triggers substitutions that are required for correct display of the given script. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Devanagari and other Indic or Brahmi-derived scripts.",
    "interaction": "This feature is used in conjunction with certain other features to derive required forms of Indic scripts. The application is expected to process this feature and certain other features in an appropriate order to obtain the correct set of basic forms: 'nukt', 'akhn', 'rphf', 'rkrf', 'pref', 'blwf', 'half', 'pstf', 'cjct'. Other discretionary features for optional typographic effects may also be applied. Lookups for such discretionary features should be processed after lookups for this feature have been processed."
  },
  "clig": {
    "friendlyName": "Contextual Ligatures",
    "registeredBy": "Adobe",
    "function": "Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. Unlike other ligature features, 'clig' specifies the context in which the ligature is recommended. This capability is important in some script designs and for swash ligatures.",
    "example": "The glyph for ft replaces the sequence f t in Bickham Script, except when preceded by an ascending letter.",
    "implementation": "The 'clig' table maps sequences of glyphs to corresponding ligatures in a chained context (GSUB lookup type 8). Ligatures with more components must be stored ahead of those with fewer components in order to be found. The set of contextual ligatures will vary by design and script.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. When processing lookups, context before or after the glyph sequence to which the feature is applied must be considered. Note: This may include a change of character code. Besides the original character code, the application should store the code for the new character.",
    "suggestion": "This feature should be active by default.",
    "sensitivity": "None.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. See also 'dlig'."
  },
  "cpct": {
    "friendlyName": "Centered CJK Punctuation",
    "registeredBy": "Adobe",
    "function": "Centers specific punctuation marks for those fonts that do not include centered and non-centered forms.",
    "example": "The user may invoke this feature in a Chinese font to get centered punctuation in case it is desired. Examples include U+3001 and U+3002, including their vertical variants, specifically U+FE11 and U+FE12, respectively.",
    "implementation": "The font specifies X- and Y-axis adjustments for a small number of full-width glyphs (GPOS lookup type 1, XPlacement, XAdvance, YPlacement and YAdvance).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature would be off by default.",
    "sensitivity": "Used primarily in Chinese fonts.",
    "interaction": "This feature is mutually exclusive with all other glyph-width features (e.g. 'tnum', 'fwid', 'hwid', 'halt', 'palt', 'twid'), which should be turned off when it is applied."
  },
  "cpsp": {
    "friendlyName": "Capital Spacing",
    "registeredBy": "Adobe",
    "function": "Globally adjusts inter-glyph spacing for all-capital text. Most typefaces contain capitals and lowercase characters, and the capitals are positioned to work with the lowercase. When capitals are used for words, they need more space between them for legibility and esthetics. This feature would not apply to monospaced designs. Of course the user may want to override this behavior in order to do more pronounced letterspacing for esthetic reasons.",
    "example": "The user sets a title in all caps, and the Capital Spacing feature opens the spacing.",
    "implementation": "The 'cpsp' table stores alternate advance widths for the capital letters covered, generally increasing them by a uniform percentage (GPOS lookup type 1, XPlacement and XAdvance).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. The application may rely on the user to apply this feature (e.g., by selecting text for a change to all-caps) or apply its own heuristics for recognizing words consisting of capitals.",
    "suggestion": "This feature should be on by default. Applications may want to allow the user to respecify the percentage to fit individual tastes and functions.",
    "sensitivity": "Should not be used in connecting scripts (e.g. most Arabic).",
    "interaction": "May be used in addition to any other feature (note specifically that this feature is additive with other GPOS features like 'kern')."
  },
  "cswh": {
    "friendlyName": "Contextual Swash",
    "registeredBy": "Adobe",
    "function": "This feature replaces default character glyphs with corresponding swash glyphs in a specified context. Note that there may be more than one swash alternate for a given character.",
    "example": "The user sets the word “HOLIDAY” in Poetica with this feature active, and is presented with a choice of three alternate forms appropriate for an initial H and one alternate appropriate for a medial L.",
    "implementation": "The 'cswh' table maps GIDs for default forms to those for one or more corresponding swash forms in a chained context, which may require a selection from a set (GSUB lookup type 8). If several styles of swash are present across the font, the set of forms for each character should be ordered consistently.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. If the font is implemented using an alternate substitution lookup, the application must provide a means for the user to select the one desired.",
    "suggestion": "This feature should be inactive by default. When implemented in the font using an alternate substitution lookup, an application could display the forms sequentially in context, or present a palette showing all the forms at once, or give the user a choice between these approaches. The application may assume that the first glyph in a set is the preferred form, so the font developer should order them accordingly.",
    "sensitivity": "Not used for ideographic scripts.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. See also 'swsh' and 'init'."
  },
  "curs": {
    "friendlyName": "Cursive Positioning",
    "registeredBy": "Microsoft",
    "function": "This feature is used to position adjacent glyphs for cursive connections.",
    "example": "In Arabic, the Meem followed by a Reh are cursively positioned by overlapping the exit point of the Meem on the entry point of the Reh.",
    "implementation": "Lookup tables for the 'curs' feature provide entry and exit points (x,y) for glyphs to be cursively positioned (GPOS lookup type 3).",
    "interface": "In recommended usage, this feature triggers positioning adjustments that are required for correct display of fonts that implement cursive joining behavior. It should always be applied.",
    "suggestion": "Control of this feature should not normally be exposed to the user.",
    "sensitivity": "Used primarily for Arabic and other cursively-connecting scripts, and also any other scripts for which cursive styles can optionally be used.",
    "interaction": "None."
  },
  "cvXX": {
    "friendlyName": "Character Variant %NUMBER%",
    "registeredBy": "Microsoft",
    "function": "A font may have stylistic-variant glyphs for one or more characters where the variations for one character are not systematically related to those for other characters. Or, a variation may exist for a character and its casing pair or related pre-composed characters, but not be applicable to other unrelated characters. In some usage scenarios, it may be necessary to provide the application with control over glyph variations for different Unicode characters individually.<br/><br/>The function of these features is similar to the function of the Stylistic Alternates feature ('salt') and the Stylistic Set features (see 'ss01' – 'ss20'). Whereas the Stylistic Set features assume recurring stylistic variations that apply to a broad set of Unicode characters, however, these features are intended for scenarios in which particular characters have variations not applicable to a broad set of characters. The Stylistic Alternates feature provides access to glyph variants, but does not allow an application to control these on a character-by-character basis; the Character Variant features provide the greater granularity of control.<br/><br/>The function of these features is also related to that of the Localized Forms ('locl') feature, in that particular variations for a character may be preferred for particular languages. In practice, though, it may not be feasible to associate particular glyph variants with particular language systems for all the relevant languages; for example, the requirements of particular languages may not be known when a font is being developed.<br/><br/>The distinction between these features and the Stylistic set features is most easily understood in terms of variations applying to a single character versus variations applying across a range of characters. In practice, if a variation applies to a character in a bicameral script, then the casing-pair character may have the same variation. Also, Unicode includes pre-composed characters for certain base + mark combinations, hence a single abstract character may be incorporated into a number of Unicode characters. Therefore, a variation for a particular abstract character may be applicable to several related Unicode characters. The Character Variant features can be used for sets of related characters in these cases. The key distinction between such use and the intended use for Stylistic Set features is that a Character Variant feature should apply only to one character or a set of characters closely related in this way, while Stylistic Set features are intended for broader sets of characters.",
    "example": "",
    "implementation": "A 'cvXX' lookup table maps the GID for the default form of a character to the GIDs for stylistic alternatives of that character. Each 'cvXX' feature uses alternate (GSUB lookup type 3) substitutions. (If there is only one variant for a character, a single-substitution lookup, type 1, can also be used.). A given 'cvXX' feature acts on a single glyph or on multiple glyphs for closely-related characters that have corresponding variants. Within each 'cvXX' feature, the number of variants should be identical for all glyphs, and the ordering of glyphs in lookup arrays should correspond such that the nth variants of all glyphs are corresponding variants.<br/><br/>The featureParamsOffset field of the Feature Table of these GSUB features may be set to 0, or to an offset to a Feature Parameters table.<br/><br/>If a font supports two or more character variant features, use of Feature Parameters tables should be consistent across all of these features.<br/><br/>The name ID provided by featUiLabelNameId is intended to provide a user-interface string for the feature; for example, “Capital-eng variants”. If set to NULL, no 'name' table string is used for the feature name.<br/><br/>The name ID provided by featUiTooltipTextNameId is intended to provide a user-interface string that provides a brief description of the feature that applications can use in popup “tooltip” help windows (e.g. “Select glyph variants for capital eng.”). If set to NULL, no 'name' table string is used for the feature “tooltip” help text.<br/><br/>The name ID provided by sampleTextNameId is intended to provide a string that can be used in a user-interface to illustrate the effect of the feature. If multiple characters are affected by the feature or if the feature affects a combining mark, it may not be evident to an application what string to use to present an illustrative sample; a 'name' table string can be provided for that purpose.<br/><br/>If numNamedParameters is non-zero, then firstParamUiLabelNameId and numNamedParameters specify a sequence of consecutive name IDs in the 'name' table. These are used to provide user-interface strings for individual variants. The range of name IDs start at firstParamUiLabelNameId and end at firstParamUiLabelNameId + numNamedParameters - 1. Each of these name IDs corresponds to a feature parameter value used to select a particular GID from the array of GIDs returned by a type 3 substitution lookup; the relation between parameter values and name IDs is: name ID = parameter + firstParamUiLabelNameId - 1. The value of numNamedParameters should not exceed the number of alternate glyphs in lookups associated with the feature; note, however, that the number of GIDs in the returned array for a GSUB type 3 lookup should not be assumed to be equal to numNamedParameters: numNamedParameters should not be more than the number of GIDs in the array, but it may be less. If numNamedParameters is zero, then no 'name' table strings are associated with feature parameters.<br/><br/>The values of featUiLabelNameId, featUiTooltipTextNameId and firstParamUiLabelNameId are expected to be in the font-specific name ID range (256–32767), though that is not a requirement in this Feature Parameters specification. The value of firstParamUiLabelNameId + numNamedParameters - 1 should not exceed 32767.<br/><br/>The user-interface label for the feature, for “tooltip” help text, or for feature parameters can be provided in multiple languages. English strings for each should be included as a fallback. A sample-text string likely would not need to be localized, though different sample-text strings for different UI languages can be used. If only one sample-text string is provided, applications may use it with any UI language.<br/><br/>The charCount field and character array are used to identify the Unicode characters for which this feature provides glyph variants. Applications can use this information in presenting user interface or for other purposes. Content of the character list is at the discretion of the font developer — the list may be exhaustive, representative, or empty — and does not affect the operation of the feature. If a font developer chooses not to include such information, charCount can be set to zero, in which case no character array can be included.<br/><br/>It is left to the discretion of application developers to determine whether or how to use the data provided in the feature parameters table or associated strings in the 'name' table.<br/><br/>Note: Since the strings provided using this feature parameter table will be used in application user interface, length is an important consideration. Strings should be as short as possible. It is recommended that the length of the feature or feature-parameter names be 25 characters or less, and that the length of “tooltip” help text be 250 characters or less.",
    "interface": "Discretionary features: can be applied to glyph runs based on document markup, user control or other application criteria. The application is responsible for counting and enumerating the number of features in the font with tag names of the format 'cv01' to 'cv99', and for presenting the user with an appropriate selection mechanism. The application is also responsible for interpreting any feature parameter tables (if the application developer wishes to use that data) and presenting referenced strings in user interface. If the font is implemented using an alternate substitution lookup, the application may use an index parameter as an index into the array of mapped glyph IDs.",
    "suggestion": "This feature should be off by default. An application can display glyph variants for a given character as a glyph palette in the user interface. If a Feature Parameters table is provided, the feature UI label or the named parameter UI labels (if provided) can be presented in the application user interface; or the sample-text string (if provided) can be presented in the application user interface.",
    "sensitivity": "None.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. Note that after a 'cvXX' feature has been applied, the user may wish to apply other typographic features, e.g. 'smcp'; font developers are responsible for ordering substitution lookups to obtain desired user experience. If it is to be used in conjunction with a complex script that requires obligatory substitution of ligatures or contextual forms, this feature should be applied before features for obligatory script behaviors."
  },
  "c2pc": {
    "friendlyName": "Petite Capitals From Capitals",
    "registeredBy": "Tiro Typeworks / Emigre",
    "function": "This feature turns capital characters into petite capitals. It is generally used for words which would otherwise be set in all caps, such as acronyms, but which are desired in petite-cap form to avoid disrupting the flow of text. See the 'pcap' feature description for notes on the relationship of caps, smallcaps and petite caps.",
    "example": "The user types UNICEF or NASA, applies 'c2pc' and gets petite cap text.",
    "implementation": "The 'c2pc' table maps capital glyphs to the corresponding petite cap forms (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. Note that applications may use this feature in an implementation to support petite-cap formatting applied to text with language-specific case-mapping logic. See 'pcap' and 'smcp' for additional information.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "Used for bicameral scripts (i.e. those with case differences), such as Latin, Greek, Cyrillic, and Armenian.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. Also see 'pcap'."
  },
  "c2sc": {
    "friendlyName": "Small Capitals From Capitals",
    "registeredBy": "Adobe",
    "function": "This feature turns capital characters into small capitals. It is generally used for words which would otherwise be set in all caps, such as acronyms, but which are desired in small-cap form to avoid disrupting the flow of text.",
    "example": "The user types UNICEF or SCUBA, applies 'c2sc' and gets small cap text.",
    "implementation": "The 'c2sc' table maps capital glyphs to the corresponding small-cap forms (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. Note that applications may use this feature in an implementation to support small-cap formatting applied to text with language-specific case-mapping logic. See 'smcp' for additional information.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "Used for bicameral scripts (i.e. those with case differences), such as Latin, Greek, Cyrillic, and Armenian.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. Also see 'smcp'."
  },
  "dist": {
    "friendlyName": "Distances",
    "registeredBy": "Microsoft",
    "function": "Provides a means to control distance between glyphs.<br/><br/>Note: This feature should only be used for required positioning adjustments, not as an alternate kerning feature. For spacing adjustments that can be controlled by the user, the 'kern' feature should be used.",
    "example": "In Telugu script, adjust the placement of subjoined consonant forms to avoid collision with other glyphs.",
    "implementation": "The font provides distances by which a glyph needs to move towards or away from another glyph (GPOS lookup type 1, type 2, or contextual lookups that reference type 1 or type 2 lookups).",
    "interface": "In recommended usage, this feature triggers positioning adjustments that are required for correct display of the given script. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Indic or other Brahmi-derived scripts.",
    "interaction": "This and other certain other features, such as 'kern', are typically implemented using single or pair adjustment positioning lookups. Note that, if multiple lookups are applied to a glyph, the positioning adjustments will be additive. The glyphs affected by the 'dist' and 'kern' features should be distinct unless it is intended that their effects can be combined."
  },
  "dlig": {
    "friendlyName": "Discretionary Ligatures",
    "registeredBy": "Adobe",
    "function": "Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. This feature covers those ligatures which may be used for special effect, at the user’s preference.",
    "example": "The glyph for ct replaces the sequence of glyphs c t, or U+322E (Kanji ligature for “Friday”) replaces the sequence U+91D1 U+66DC U+65E5.",
    "implementation": "The 'dlig' table maps sequences of glyphs to corresponding ligatures (GSUB lookup type 4). Ligatures with more components must be stored ahead of those with fewer components in order to be found. The set of discretionary ligatures will vary by design and script.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. When processing lookups, context before or after the glyph sequence to which the feature is applied must be considered. Besides the original character code, the application should store the code for the new character.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "None.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. See also 'clig'."
  },
  "dnom": {
    "friendlyName": "Denominators",
    "registeredBy": "Adobe",
    "function": "Replaces selected figures which follow a slash with denominator figures.",
    "example": "In the string 11/17 selected by the user, the application turns the 17 into denominators when the user applies the fraction feature ('frac').",
    "implementation": "Glyphs for figures (digits) and related characters (grouping or decimal separators) are mapped to corresponding denominator glyphs in the font (GSUB lookup type 1).",
    "interface": "In recommended usage, this feature is applied automatically as part of the application’s implementation for the 'frac' feature. See the 'frac' for details.",
    "suggestion": "In recommended usage, this feature is applied to sequences automatically by applications when the 'frac' feature is used, and direct user control is not required.",
    "sensitivity": "None.",
    "interaction": "This feature supports 'frac'. It may be used in combination with other substitution (GSUB) features, whose results it may override."
  },
  "dtls": {
    "friendlyName": "Dotless Forms",
    "registeredBy": "Microsoft",
    "function": "This feature provides dotless forms for Math Alphanumeric characters, such as U+1D422 MATHEMATICAL BOLD SMALL I, U+1D423 MATHEMATICAL BOLD SMALL J, U+1D456 U+MATHEMATICAL ITALIC SMALL I, U+1D457 MATHEMATICAL ITALIC SMALL J, and so on. The dotless forms are to be used as base forms for placing mathematical accents over them.",
    "example": "When adding a tilde to an i, the dotless form is substituted before attaching the tilde accent on top of it.",
    "implementation": "Single substitution (GSUB lookup type 1), for glyphs of all dotted characters.",
    "interface": "In recommended usage, this feature is used to trigger substitutions that are required for correct display of math formula. It should be applied in appropriate contexts under the control of a math layout handler. See the 'MATH' table chapter for additional information.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for math formula layout.",
    "interaction": "This feature is applied to individual glyphs during layout of math formula."
  },
  "expt": {
    "friendlyName": "Expert Forms",
    "registeredBy": "Adobe",
    "function": "Like the JIS78 Forms feature, this feature replaces standard forms in Japanese fonts with corresponding forms preferred by typographers. Although most of the JIS78 substitutions are included, the expert substitution goes on to handle many more characters.",
    "example": "The user would invoke this feature to replace kanji character U+5516 with U+555E.",
    "implementation": "The 'expt' table maps many default (JIS90) GIDs to corresponding alternates (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. Note: This is a change of character code. Besides the original character code, the application should store the code for the new character.",
    "suggestion": "Applications may choose to have this feature active or inactive by default, depending on their target markets.",
    "sensitivity": "Applies only to Japanese.",
    "interaction": "This feature is mutually exclusive with all other features, which should be turned off when it’s applied, except the 'palt', 'vpal', 'vert' and 'vrt2' features, which may be used in addition."
  },
  "falt": {
    "friendlyName": "Final Glyph on Line Alternates",
    "registeredBy": "Microsoft",
    "function": "Replaces line final glyphs with alternate forms specifically designed for this purpose (they would have less or more advance width as need may be), to help justification of text.",
    "example": "In the Arabic script, providing alternate forms for line final glyphs would result in better justification. eg. replacing a long tailed Yeh-with-tail with one that has a slightly longer/shorter tail.",
    "implementation": "A 'falt' lookup table maps line final glyphs (in isolated or final forms) to their corresponding alternate forms (GSUB lookup type 1).",
    "interface": "In recommended usage, this feature is applied automatically to final glyphs of lines when text is justified. The feature may affect the length of lines, which should be taken into consideration by line-breaking and justification algorithms.",
    "suggestion": "This feature could be made active or inactive by default, at the user’s preference.",
    "sensitivity": "Can be used in any cursive script.",
    "interaction": "Would need to be applied last, only after all other features have been applied to the run."
  },
  "fin2": {
    "friendlyName": "Terminal Form #2",
    "registeredBy": "Microsoft",
    "function": "Used to replace the Alaph glyph at the end of Syriac words with its appropriate form, when the preceding base character cannot be joined to, and that preceding base character is not a Dalath, Rish, or dotless Dalath-Rish.",
    "example": "When an Alaph is preceded by a He, the Alaph would be replaced by an appropriate form. This feature is used only for the Syriac script alaph character.",
    "implementation": "A 'fin2' lookup table maps default alphabetic forms to corresponding final forms (GSUB lookup type 1).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct layout of Syriac text. The application should always apply the feature to the Alaph glyph when the preceding base character is non-joining and is a character other than Dalath, Rish, or dotless Dalath-Rish.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used only with the Syriac script.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. See also 'init' and 'fina'."
  },
  "fin3": {
    "friendlyName": "Terminal Form #3",
    "registeredBy": "Microsoft",
    "function": "Used to replace Alaph glyphs at the end of Syriac words when the preceding base character is a Dalath, Rish, or dotless Dalath-Rish.",
    "example": "When an Alaph is preceded by a Dalath, the Alaph would be replaced by an appropriate form. This feature is used only for the Syriac script alaph character.",
    "implementation": "A 'fin3' lookup table maps default alphabetic forms to corresponding final forms (GSUB lookup type 5).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct layout of Syriac text. The application should always apply the feature to the Alaph glyph when at the end of Syriac words if the preceding base character is Dalath, Rish, or dotless Dalath-Rish.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used only with the Syriac script.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. See also 'init' and 'fina'."
  },
  "fina": {
    "friendlyName": "Terminal Forms",
    "registeredBy": "Microsoft/Adobe",
    "function": "Replaces glyphs for characters that have applicable joining properties with an alternate form when occurring in a final context. This applies to characters that have one of the following Unicode Joining_Type property values:<br/><br/>Right_Joining, if the characters are from a right-to-left script.<br/>Left_Joining, if the characters are from a left-to-right script.<br/>Dual_Joining.<br/><br/>Unicode Joining_Type property values are obtained from the Unicode Character Database (UCD). Specifically, Joining_Type property values are documented in the UCD file, ArabicShaping.txt, the current version of which is available at http://www.unicode.org/Public/UCD/latest/ucd/ArabicShaping.txt .",
    "example": "In an Arabic-script font, the application would apply the 'fina' feature to the letter ARABIC LETTER WAW (U+0648 “و”) when it follows a left-joining character, thereby replacing the default “و” glyph with its right-joining, final form.",
    "implementation": "The 'fina' feature is used to map default forms to corresponding single-joining, final forms. This will usually be implemented using a single substitution (type 1) GSUB lookup, though contextual substitution GSUB lookups (types 5, 6 or 8) may also be appropriate.",
    "interface": "In recommended usage, this feature triggers substitutions that are required for correct display of cursively-connecting scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements. The application is responsible for parsing character strings and identifying which of the joining-related features — initial forms ('init'), medial forms ('medi'), terminal forms ('fina'), and isolated forms ('isol') — to apply to which GIDs, based on character Joining_Type properties. Additional factors, such as the presence of control characters, may also be considered.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Can be used in any script with joining behavior — that is, the scripts for which Joining_Type properties are given explicitly in ArabicShaping.txt.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. See also 'init', 'isol' and 'medi'."
  },
  "flac": {
    "friendlyName": "Flattened ascent forms",
    "registeredBy": "Microsoft",
    "function": "This feature provides flattened forms of accents to be used over high-rise bases such as capitals. This feature should only change the shape of the accent and should not move it in the vertical or horizontal direction. Moving of the accents is done by the math layout engine. Accents are flattened by the Math engine if their base is higher than MATH.MathConstants. FlattenedAccentBaseHeight.",
    "example": "Depending on the font parameters, a lowercase a with tilde may used in default form and an uppercase A with tilde may use the flattened form",
    "implementation": "Single substitution, replacing ascent glyph with its flattened form. See MATH table specification for details.",
    "interface": "In recommended usage, this feature is used to trigger substitutions that are required for correct display of math formula. It should be applied in the appropriate contexts, as determined by math layout handler. See the 'MATH' table chapter for additional information.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for math formula layout.",
    "interaction": "This feature is applied to individual glyphs during layout of math formula."
  },
  "frac": {
    "friendlyName": "Fractions",
    "registeredBy": "Microsoft/Adobe",
    "function": "Replaces figures (digits) separated by a slash (U+002F or U+2044) with “common” (diagonal) fractions.",
    "example": "The user enters 3/4 and gets the threequarters fraction.",
    "implementation": "Glyphs for figures (digits) separated by a slash are mapped to variant forms (GSUB lookup type 1, or contextual substitutions that reference type 1 lookups), or sequences of such glyphs are mapped to ligature fraction glyphs (GSUB lookup type 4).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.<br/><br/>An application may automatically apply the feature over certain text sequences, such as sequences of one or more digits followed by fraction slash (U+2044) followed by one or more digits. An application may also automatically apply the 'numr' feature to a sequence preceding a slash, and the 'dnom' feature to a sequence following a slash, either based on analysis of the text sequence or as a corollary to application of the 'frac' feature over a sequence.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "None.",
    "interaction": "Applications may use this feature in conjuction with the 'numr' and 'dnom' features. It may be used in combination with other substitution (GSUB) features, whose results it may override."
  },
  "fwid": {
    "friendlyName": "Full Widths",
    "registeredBy": "Adobe",
    "function": "Replaces glyphs set on other widths with glyphs set on full (usually em) widths. In a CJKV font, this may include “lower ASCII” Latin characters and various symbols. In a European font, this feature replaces proportionally-spaced glyphs with monospaced glyphs, which are generally set on widths of 0.6 em.",
    "example": "The user may invoke this feature in a Japanese font to get full monospaced Latin glyphs instead of the corresponding proportionally-spaced versions.",
    "implementation": "The font may contain alternate glyphs designed to be set on full widths (GSUB lookup type 1), or it may specify alternate (full-width) metrics for the proportional glyphs (GPOS lookup type 1, XPlacement and XAdvance).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature would normally be off by default.",
    "sensitivity": "Can be used for any script which can use monospaced forms.",
    "interaction": "This feature is mutually exclusive with all other glyph-width features (e.g. 'tnum', 'halt', 'hwid', 'palt', 'pwid', 'qwid' and 'twid'), which should be turned off when it’s applied. It deactivates the 'kern' feature."
  },
  "half": {
    "friendlyName": "Half Forms",
    "registeredBy": "Microsoft",
    "function": "Produces the half forms of consonants in Indic scripts.",
    "example": "In Hindi (Devanagari script), the conjunct KKa, obtained by doubling the Ka, is denoted with a half form of Ka followed by the full form.",
    "implementation": "A 'half' lookup table maps the sequence of a consonant followed by a virama (halant) to its half form (GSUB lookup type 4).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct display of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Devanagari and other Indic or Brahmi-derived scripts that have pre-base consonant half forms.",
    "interaction": "This feature is used in conjunction with certain other features to derive required forms of Indic scripts. The application is expected to process this feature and certain other features in an appropriate order to obtain the correct set of basic forms: 'nukt', 'akhn', 'rphf', 'rkrf', 'pref', 'blwf', 'half', 'pstf', 'cjct'. Other discretionary features for optional typographic effects may also be applied. Lookups for such discretionary features should be processed after lookups for this feature have been processed."
  },
  "haln": {
    "friendlyName": "Halant Forms",
    "registeredBy": "Microsoft",
    "function": "Produces the halant forms of consonants in Indic scripts (that is, precomposed glyphs for consonant with the halant).",
    "example": "In Sanskrit (Devanagari script), syllable final consonants are frequently required in their halant form.",
    "implementation": "A 'haln' lookup table maps the sequence of a consonant followed by a virama (halant) to its halant form (GSUB lookup type 4).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct display of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Indic or other Brahmi-derived scripts.",
    "interaction": "This feature overrides the results of all other features."
  },
  "halt": {
    "friendlyName": "Alternate Half Widths",
    "registeredBy": "Adobe",
    "function": "Re-spaces glyphs designed to be set on full-em widths, fitting them onto half-em widths, to approximate more sophisticated text layout, such as what is described in Requirements for Japanese Text Layout (JLREQ) or similar CJKV text-layout specifications that expect half-width forms of characters whose default glyphs are full-width.* This feature differs from 'hwid' in that it is not used to substitute new glyphs.<br/><br/>* In JLREQ, see, in particular, 3.1.4 Positioning of Consecutive Opening Brackets, Closing Brackets, Commas, Full Stops and Middle Dots and B. Spacing between Characters. See also Requirements for Chinese Text Layout (CLREQ), Requirements for Hangul Text Layout (KLREQ).",
    "example": "The user may invoke this feature in a CJKV font to get better fit for punctuation or symbol glyphs without disrupting the monospaced alignment.",
    "implementation": "The font specifies alternate metrics for the full-width glyphs (GPOS lookup type 1, XPlacement, XAdvance, YPlacement and YAdvance).",
    "interface": "If a layout engine supports advanced layout for CJKV text as described in CLREQ, JLREQ or KLREQ, this feature should not be used. Otherwise, this feature should be enabled in horizontal layout to all CJKV text or selectively to particular characters that require special treatment in CJKV text layout, such as brackets, punctuation, and quotation marks.",
    "suggestion": "This feature should not be used in combination with a layout engine that independently provides advanced layout as described in CLREQ, JLREQ or KLREQ. For applications that provide such advanced layout, it may appropriate not to expose control of this feature to users. In applications that do not support such advanced layout, this feature should be enabled by default for horizontal layout of CJK text.",
    "sensitivity": "Used only in CJKV fonts.",
    "interaction": "This feature is mutually exclusive with all other glyph-height features (e.g., 'fwid', 'hwid', 'palt', 'tnum', 'twid'), which should be turned off when this feature is applied. It deactivates the 'kern' feature. See also 'vhal'."
  },
  "hist": {
    "friendlyName": "Historical Forms",
    "registeredBy": "Microsoft/Adobe",
    "function": "Some letterforms were in common use in the past, but appear anachronistic today. The best-known example is the long form of s; others would include the old Fraktur k. Some fonts include the historical forms as alternates, so they can be used for a “period” effect. This feature replaces the default (current) forms with the historical alternates. While some ligatures are also used for historical effect, this feature deals only with single characters.",
    "example": "The user applies this feature in Adobe Jenson to get the archaic forms of M, Q and Z.",
    "implementation": "The 'hist' table maps default forms to corresponding historical forms (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "None.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override."
  },
  "hkna": {
    "friendlyName": "Horizontal Kana Alternates",
    "registeredBy": "Adobe",
    "function": "Replaces standard kana with forms that have been specially designed for only horizontal writing. This is a typographic optimization for improved fit and more even color. Also see 'vkna'.",
    "example": "Standard full-width kana (hiragana and katakana) are replaced by forms that are designed for horizontal use.",
    "implementation": "A 'hkna' lookup table maps the standard full-width forms to the corresponding special horizontal forms (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature would be off by default.",
    "sensitivity": "Used only in fonts that support kana (hiragana and katakana).",
    "interaction": "This feature may be used with the 'kern' feature. Since it is for horizontal use, features applying to vertical behaviors (e.g. 'vkna', 'vert', 'vrt2' or 'vkrn') do not apply."
  },
  "hlig": {
    "friendlyName": "Historical Ligatures",
    "registeredBy": "Microsoft",
    "function": "Some ligatures were in common use in the past, but appear anachronistic today. Some fonts include the historical forms as alternates, so they can be used for a “period” effect. This feature replaces the default (current) forms with the historical alternates.",
    "example": "The user applies this feature using Palatino Linotype, and historic ligatures are formed for all long s forms, including: long s+t, long s+b, long s+h, long s+k, and several others.",
    "implementation": "Sequences of glyphs for certain character combinations are mapped to corresponding historical ligature glyphs.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "None.",
    "interaction": "This feature overrides the results of all other features."
  },
  "hngl": {
    "friendlyName": "Hangul",
    "registeredBy": "Adobe",
    "function": "Replaces hanja (Chinese-style) Korean characters with the corresponding hangul (syllabic) characters. This effectively reverses the standard input method, in which hangul are entered and replaced by hanja. Many of these substitutions are one-to-one (GSUB lookup type 1), but hanja substitution often requires the user to choose from several possible hangul characters (GSUB lookup type 3). Note: deprecated.",
    "example": "The user may call this feature to get U+AC00 from U+4F3D.",
    "implementation": "Glyphs for hanja characters are mapped to corresponding glyphs for Hangul syllables (GSUB lookup type 1); or default glyphs for hanja characters are mapped to two or more corresponding alternate glyphs for Hangul syllables (GSUB lookup type 3). As in any one-from-many substitution, alternates should be ordered consistently across a family, so that those alternates can work correctly when switching between family members.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. If the font is implemented using an alternate substitution lookup, the application must provide a means for the user to select the one desired. Note: This is a change of semantic value. Besides the original character codes (when entered as hanja), the application should store the code for the new character.",
    "suggestion": "This feature should be inactive by default. The application may note the user’s choice when selecting from multiple hangul, and offer it as a default the next time the source hanja character is encountered. In the absence of such prior information, the application may assume that the first hangul in a set is the preferred form, so the font developer should order them accordingly.",
    "sensitivity": "Korean only.",
    "interaction": "This feature is mutually exclusive with all other features, which should be turned off when it’s applied, except the 'palt', 'vert' and 'vrt2' may be used in addition."
  },
  "hojo": {
    "friendlyName": "Hojo Kanji Forms",
    "registeredBy": "Adobe",
    "function": "The JIS X 0212-1990 (aka, “Hojo Kanji”) and JIS X 0213:2004 character sets overlap significantly. In some cases their prototypical glyphs differ. When building fonts that support both JIS X 0212-1990 and JIS X 0213:2004 (such as those supporting the Adobe-Japan 1-6 character collection), it is recommended that JIS X 0213:2004 forms be preferred as the encoded form. The 'hojo' feature is used to access the JIS X 0212-1990 glyphs for the cases when the JIS X 0213:2004 form is encoded.",
    "example": "",
    "implementation": "One-for-one substitution of JIS X 0213:2004 glyphs by the corresponding JIS X 0212-1990 glyph.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "Used only with Kanji characters in Japanese.",
    "interaction": "This feature is exclusive with 'jp78', 'jp83', 'jp90', 'nlck' and similar features. It can be combined with the 'palt', 'vpal', 'vert' and 'vrt2' features."
  },
  "hwid": {
    "friendlyName": "Half Widths",
    "registeredBy": "Adobe",
    "function": "Replaces glyphs on proportional widths, or fixed widths other than half an em, with glyphs on half-em (en) widths. Many CJKV fonts have glyphs which are set on multiple widths; this feature selects the half-em version. There are various contexts in which this is the preferred behavior, including compatibility with older desktop documents.",
    "example": "The user may replace a proportional Latin glyph with the same character set on a half-em width.",
    "implementation": "The font may contain alternate glyphs designed to be set on half-em widths (GSUB lookup type 1), or it may specify alternate metrics for the original glyphs (GPOS lookup type 1, XPlacement and XAdvance) which adjust their spacing to fit in half-em widths.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature would normally be off by default.",
    "sensitivity": "Generally used only in CJKV fonts.",
    "interaction": "This feature is mutually exclusive with all other glyph-width features (e.g. 'tnum', 'fwid', 'halt', 'qwid' and 'twid'), which should be turned off when it’s applied. It deactivates the 'kern' feature."
  },
  "init": {
    "friendlyName": "Initial Forms",
    "registeredBy": "Microsoft/Adobe",
    "function": "Replaces glyphs for characters that have applicable joining properties with an alternate form when occurring in an initial context. This applies to characters that have one of the following Unicode Joining_Type property values:<br/><br/>Right_Joining, if the characters are from a left-to-right script.<br/>Left_Joining, if the characters are from a right-to-left script.<br/>Dual_Joining.<br/><br/>Unicode Joining_Type property values are obtained from the Unicode Character Database (UCD). Specifically, Joining_Type property values are documented in the UCD file, ArabicShaping.txt, the current version of which is available at http://www.unicode.org/Public/UCD/latest/ucd/ArabicShaping.txt.",
    "example": "In an Arabic-script font, the application would apply the 'init' feature to the letter ARABIC LETTER SEEN (U+0633 “س”) when it precedes a right-joining character, thereby replacing the default “س” glyph with its left-joining, initial form.",
    "implementation": "The 'init' feature is used to map default forms to corresponding single-joining, inital forms. This will usually be implemented using a single substitution (type 1) GSUB lookup, though contextual substitution GSUB lookups (types 5, 6 or 8) may also be appropriate.",
    "interface": "In recommended usage, this feature triggers substitutions that are required for correct display of cursively-connecting scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements. The application is responsible for parsing character strings and identifying which of the joining-related features — initial forms ('init'), medial forms ('medi'), terminal forms ('fina'), and isolated forms ('isol') — to apply to which GIDs, based on character Joining_Type properties. Additional factors, such as the presence of control characters, may also be considered.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Can be used in any script with joining behavior — that is, the scripts for which Joining_Type properties are given explicitly in ArabicShaping.txt.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. See also 'fina', 'isol' and 'medi'."
  },
  "isol": {
    "friendlyName": "Isolated Forms",
    "registeredBy": "Microsoft",
    "function": "Replaces glyphs for characters that have applicable joining properties with an alternate form when occurring in a isolate (non-joining) context. This applies to characters that have one of the following Unicode Joining_Type property values:<br/><br/>Right_Joining.<br/>Left_Joining.<br/>Dual_Joining.<br/>Non_Joining, if the characters are from a script with joining behavior.<br/><br/>Unicode Joining_Type property values are obtained from the Unicode Character Database (UCD). Specifically, Joining_Type property values are documented in the UCD file, ArabicShaping.txt, the current version of which is available at http://www.unicode.org/Public/UCD/latest/ucd/ArabicShaping.txt. Scripts that have joining behavior are those scripts with character properties given explicitly in ArabicShaping.txt.<br/><br/>Note that, in many fonts that support the relevant scripts, this feature may not be implemented since the default forms of the relevant characters are the isolated forms. In some fonts, this feature may involve contextual substitution based on the specific, isolated context.",
    "example": "In an Arabic-script font, the application would apply the 'isol' feature to the letter ARABIC LETTER HEH (U+0647 “ه”) when not adjacent to any joining character, thereby potentially replacing the default “ه” glyph with a special, isolated form (likely, a contextual and language-specific substitution, substituting one isolated form for another).",
    "implementation": "The 'isol' feature is used to map default forms to alternate non-joining, isolate forms. This will usually be implemented using a single substitution (type 1) GSUB lookup or, often, a contextual substitution GSUB lookup (types 5, 6 or 8).",
    "interface": "In recommended usage, this feature triggers substitutions that are required for correct display of cursively-connecting scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements. The application is responsible for parsing character strings and identifying which of the joining-related features — initial forms ('init'), medial forms ('medi'), terminal forms ('fina'), and isolated forms ('isol') — to apply to which GIDs, based on character Joining_Type properties. Additional factors, such as the presence of control characters, may also be considered.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Can be used in any script with joining behavior — that is, the scripts for which Joining_Type properties are given explicitly in ArabicShaping.txt.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. See also 'fina', 'init' and 'medi'."
  },
  "ital": {
    "friendlyName": "Italics",
    "registeredBy": "Adobe",
    "function": "Some fonts (such as Adobe’s Pro Japanese fonts) will have both Roman and Italic forms of some characters in a single font. This feature replaces the Roman glyphs with the corresponding Italic glyphs.",
    "example": "",
    "implementation": "The 'ital' table maps the Roman forms in a font to the corresponding Italic forms (GSUB lookup type 1).",
    "interface": "This feature is applied automatically by the application based on italic formatting indicated in document markup, user control or other means.",
    "suggestion": "When a user selects text and applies an Italic style, an application should check for this feature and use it if present.",
    "sensitivity": "Used mostly for Latin, particularly in fonts designed primarily for CJKV or other scripts that do not normally use italics.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. In CJKV fonts it should activate the 'kern' feature (which would be on anyway in other scripts)."
  },
  "jalt": {
    "friendlyName": "Justification Alternates",
    "registeredBy": "Microsoft",
    "function": "Improves justification of text by replacing glyphs with alternate forms specifically designed for this purpose (they would have less or more advance width as need may be).",
    "example": "In the Arabic script, providing alternate forms for line final glyphs would result in better justification and reduce the use of tatweels (Kashidas). eg. replacing a Swash Kaf with an alternate form.",
    "implementation": "A 'jalt' lookup table maps the initial, medial, final or isolated forms to their corresponding alternate forms (GSUB lookup type 1).",
    "interface": "In recommended usage, this feature is applied automatically to glyphs in justified text, as determined by a justication algorithm or direct user control. The feature may affect the length of lines, which should be taken into consideration by line-breaking and justification algorithms.",
    "suggestion": "This feature could be made active or inactive by default, at the user’s preference.",
    "sensitivity": "Can be used in any cursive script.",
    "interaction": "If the font contains 'init', 'medi', 'fina', 'isol' features, these need to be called prior to calling this feature."
  },
  "jp78": {
    "friendlyName": "JIS78 Forms",
    "registeredBy": "Adobe",
    "function": "This feature replaces default (JIS90) Japanese glyphs with the corresponding forms from the JIS C 6226-1978 (JIS78) specification.",
    "example": "The user would invoke this feature to replace kanji character U+5516 with U+555E.",
    "implementation": "When JIS90 glyphs correspond to JIS78 forms, the 'jp78' table maps each of those glyphs to their alternates. While many of these substitutions are one-to-one (GSUB lookup type 1), others require a selection from a set (GSUB lookup type 3). The manufacturer may choose to build two tables (one for each lookup type) or only one which uses lookup type 3 for all substitutions.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. If the font is implemented using an alternate substitution lookup, the application must provide a means for the user to select the one desired. The application may assume that the first glyph in a set is the preferred form, so the font developer should order them accordingly. Note: This is a change of character code. Besides the original character code, the application should store the code for the new character.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "Used only for Japanese.",
    "interaction": "This feature is mutually exclusive with all other features, which should be turned off when it’s applied, except the 'palt', 'vpal', 'vert' and 'vrt2' features, which may be used in addition."
  },
  "jp83": {
    "friendlyName": "JIS83 Forms",
    "registeredBy": "Adobe",
    "function": "This feature replaces default (JIS90) Japanese glyphs with the corresponding forms from the JIS X 0208-1983 (JIS83) specification.",
    "example": "Because of the Han unification in Unicode, there are no JIS83 glyphs which have distinct Unicode values, so the substitution cannot be described specifically.",
    "implementation": "When JIS90 glyphs correspond to JIS83 forms, the 'jp83' table maps each of those glyphs to their alternates (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. If the font is implemented using an alternate substitution lookup, the application must provide a means for the user to select the one desired.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "Used only for Japanese.",
    "interaction": "This feature is mutually exclusive with all other features, which should be turned off when it’s applied, except the 'palt', 'vpal', 'vert' and 'vrt2' features, which may be used in addition."
  },
  "jp90": {
    "friendlyName": "JIS90 Forms",
    "registeredBy": "Adobe",
    "function": "This feature replaces Japanese glyphs from the JIS78 or JIS83 specifications with the corresponding forms from the JIS X 0208-1990 (JIS90) specification.",
    "example": "The user would invoke this feature to replace kanji character U+555E with U+5516.",
    "implementation": "The 'jp90' table maps each JIS78 and JIS83 form in a font to JIS90 forms (GSUB lookup type 1). The application stores a record of any simplified forms which resulted from substitutions (the 'jp78' or 'jp83' features); for such forms, applying the 'jp90' feature undoes the previous substitution. When there is no record of a substitution, the application uses the 'jp90' table to get back to the default form.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. Note: This is a change of character code. Besides the original character code, the application should store the code for the new character.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "Used only for Japanese.",
    "interaction": "This feature is mutually exclusive with all other features, which should be turned off when it’s applied, except the 'palt', 'vpal', 'vert' and 'vrt2' features, which may be used in addition."
  },
  "jp04": {
    "friendlyName": "JIS2004 Forms",
    "registeredBy": "Adobe",
    "function": "The National Language Council (NLC) of Japan has defined new glyph shapes for a number of JIS characters, which were incorporated into JIS X 0213:2004 as new prototypical forms. The 'jp04' feature is a subset of the 'nlck' feature, and is used to access these prototypical glyphs in a manner that maintains the integrity of JIS X 0213:2004.",
    "example": "",
    "implementation": "One-for-one substitution of non-JIS X 0213:2004 glyphs by the corresponding JIS X 0213:2004 glyph.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "Used only for Japanese.",
    "interaction": "This feature is exclusive with 'jp78', 'jp83', 'jp90', 'nlck' and similar features. It can be combined with the 'palt', 'vpal', 'vert' and 'vrt2' features."
  },
  "kern": {
    "friendlyName": "Kerning",
    "registeredBy": "Microsoft/Adobe",
    "function": "Adjusts amount of space between glyphs, generally to provide optically consistent spacing between glyphs. Although a well-designed typeface has consistent inter-glyph spacing overall, some glyph combinations require adjustment for improved legibility. Besides standard adjustment in the horizontal direction, this feature can supply size-dependent kerning data via device tables, “cross-stream” kerning in the Y text direction, and adjustment of glyph placement independent of the advance adjustment. Note that this feature may apply to runs of more than two glyphs, and would not be used in monospaced fonts. Also note that this feature does not apply to text set vertically.<br/><br/>Note: This feature should only be used for intended spacing adjustments that may be overridden by the user. For required spacing adjustments not under user control, as may be needed for certain scripts, the 'dist' feature should be used.",
    "example": "The o is shifted closer to the T in the combination “To.”",
    "implementation": "The font stores a set of adjustments for pairs of glyphs (GPOS lookup type 2 or 8, XPlacement, XAdvance, YPlacement and YAdvance). These may be stored as one or more tables matching left and right classes, &/or as individual pairs. Additional adjustments may be provided for larger sets of glyphs (e.g. triplets, quadruplets, etc.) to overwrite the results of pair kerns in particular combinations.<br/><br/>Note: When using a GPOS type 2 lookup for this feature, it is recommended that no positioning adjustment be applied to the second glyph in a pair. (That is, that valueFormat2 be set to 0.) As a result, the next glyph pair to be processed after the lookup has been applied to this pair will start at the second glyph. In this way, every glyph in a sequence can undergo positioning adjustment as the first glyph in a pair. Otherwise, if positioning of the second glyph is adjusted, then the next glyph pair to be processed will begin with the glyph following the second glyph. That will result in kerning adjustment happening only for every other pair of glyphs.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature should be active by default for horizontal text setting. Applications may wish to allow users to add further manually-specified adjustments to suit specific needs and tastes.",
    "sensitivity": "None.",
    "interaction": "If 'kern' is activated, 'palt' must also be activated if it exists. If 'palt' is activated, there is no requirement that 'kern' must also be activated. May be used in addition to any other feature except those which result in fixed (uniform) advance widths (e.g. 'fwid', 'halt', 'hwid', 'qwid' and 'twid')."
  },
  "lfbd": {
    "friendlyName": "Left Bounds",
    "registeredBy": "Adobe",
    "function": "Aligns glyphs by their apparent left extents at the left ends of horizontal lines of text, replacing the default behavior of aligning glyphs by their origins.",
    "example": "Succeeding lines beginning with T, D and W would shift to the left by varying amounts when the text is left-justified and this feature is applied.",
    "implementation": "Values for affected glyphs describe the amount by which the placement and advance width should be altered (GPOS lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. In recommended usage, the application applies this feature to characters at the left end of a horizontal line when paragraphs are left or left and right justified.",
    "suggestion": "This feature should be inactive by default. Applications may expose to users direct control of this feature and also the Right Bounds feature ('rtbd'), or may automatically activate the feature based on other paragraph layout settings.",
    "sensitivity": "None.",
    "interaction": "Should not be applied to glyphs which use fixed-width features (e.g. 'fwid', 'halt', 'hwid', 'qwid' and 'twid') or vertical features (e.g. 'vert', 'vrt2', 'vpal', 'valt' and 'vhal')."
  },
  "liga": {
    "friendlyName": "Standard Ligatures",
    "registeredBy": "Microsoft/Adobe",
    "function": "Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. This feature covers the ligatures which the designer/manufacturer judges should be used in normal conditions.",
    "example": "The glyph for ffl replaces the sequence of glyphs f f l.",
    "implementation": "The 'liga' table maps sequences of glyphs to corresponding ligatures (GSUB lookup type 4). Ligatures with more components must be stored ahead of those with fewer components in order to be found. The set of standard ligatures will vary by design and script.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature serves a critical function in some contexts, and should be active by default.",
    "sensitivity": "None.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override."
  },
  "ljmo": {
    "friendlyName": "Leading Jamo Forms",
    "registeredBy": "Microsoft",
    "function": "Substitutes the leading jamo form of a cluster.",
    "example": "In Hangul script, the jamo cluster is composed of three parts (leading consonant, vowel, and trailing consonant). When a sequence of leading class jamos are found, their combined leading jamo form is substituted.",
    "implementation": "The default glyph for a leading jamo is mapped into an alternate form required for conjoining in a syllable (GSUB lookup type 1, or a contextual substitution referencing a type 1 lookup).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct layout of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Hangul script , particularly when Unicode conjoining jamo characters are used.",
    "interaction": "This feature overrides the results of all other features."
  },
  "lnum": {
    "friendlyName": "Lining Figures",
    "registeredBy": "Adobe (Modified by Adobe, this is the newer description)",
    "function": "This feature changes selected non-lining figures (digits) to lining figures.",
    "example": "The user invokes this feature in order to get lining figures, which fit better with all-capital text. Various characters designed to be used with figures may also be covered by this feature. In cases where lining figures are the default form, this feature would undo previous substitutions.",
    "implementation": "Glyphs for figures (digits) or other characters used in numbers (grouping or decimal separators) are mapped to corresponding lining forms (GSUB lookup type 1). If the default figures are non-lining, they too are mapped to the corresponding lining form.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. Even if the current figures resulted from an earlier substitution, it may not be correct to simply revert to the original GIDs, because of interaction with the figure width features, so it’s best to use this table.",
    "suggestion": "This feature should be inactive by default. Users can switch between the lining and oldstyle sets by turning this feature on or off. Note that this feature is distinct from the figure width features ('pnum' and 'tnum'). When the user invokes this feature, the application may wish to inquire whether a change in width is also desired.",
    "sensitivity": "None.",
    "interaction": "This feature overrides the results of the Oldstyle Figures feature ('onum')."
  },
  "locl": {
    "friendlyName": "Localized Forms",
    "registeredBy": "Tiro Typeworks/Adobe",
    "function": "Many scripts used to write multiple languages over wide geographical areas have developed localized variant forms of specific letters, which are used by individual literary communities. For example, a number of letters in the Bulgarian and Serbian alphabets have forms distinct from their Russian counterparts and from each other. In some cases the localized form differs only subtly from the script “norm”, in others the forms are radically distinct. This feature enables localized forms of glyphs to be substituted for default forms.",
    "example": "The user applies this feature to text to enable localized Bulgarian forms of Cyrillic letters; alternatively, the feature might enable localized Russian forms in a Bulgarian manufactured font in which the Bulgarian forms are the default characters.",
    "implementation": "For a given Unicode value, the font contains glyphs for two or more locales. The 'locl' table maps GIDs for default forms to GIDs for corresponding localized alternatives. These are one-to-one substitutions (GSUB lookup type 1).",
    "interface": "In recommended usage, this feature triggers substitutions or positioning adjustments to provide the most appropriate typography for the language of content. This feature should always be applied. Language tagging or similar metadata indicating the language of the text should be used to select the most appropriate language system table within the font’s GPOS or GSUB table.",
    "suggestion": "Control of the feature should not generally be exposed to the user directly. Control over language-specific typography should be provided by language settings or by providing the user ability to choose between the alternative language systems supported in the font’s GPOS or GSUB tables.",
    "sensitivity": "None.",
    "interaction": "This feature can be used in combination with any other feature. It replaces and extends the earlier locale-specific tags 'zhcn', 'zhtw', 'jajp', 'kokr' and 'vivn' which had been defined for CJKV scripts."
  },
  "ltra": {
    "friendlyName": "Left-to-right glyph alternates",
    "registeredBy": "Adobe",
    "function": "This feature applies glyphic variants (other than mirrored forms) appropriate for left-to-right text (for mirrored forms, see 'ltrm').",
    "example": "",
    "implementation": "These are required to be glyph substitutions, and it is recommended that they be one-to-one (GSUB lookup type 1).",
    "interface": "See section “Left-to-right and right-to-left text” on the Advanced Typographic Extensions page. https://learn.microsoft.com/en-us/typography/opentype/spec/ttochap1#ltrrtl",
    "suggestion": "Control of this feature should not generally be exposed to the user.",
    "sensitivity": "Left-to-right runs of text.",
    "interaction": "This feature is to be applied simultaneously with other pre-shaping features such as 'ccmp' and 'locl'."
  },
  "ltrm": {
    "friendlyName": "Left-to-right mirrored forms",
    "registeredBy": "Adobe",
    "function": "This feature applies mirrored forms appropriate for left-to-right text. (For left-to-right glyph alternates, see 'ltra').",
    "example": "The Old South Arabian script is a case of a strong right-to-left script that can have lines laid out left-to-right, in which case some glyphs would need to be mirrored with the 'ltrm' feature.",
    "implementation": "These are required to be glyph substitutions, and it is recommended that they be one-to-one (GSUB lookup type 1).",
    "interface": "See section “Left-to-right and right-to-left text” on the Advanced Typographic Extensions page. https://learn.microsoft.com/en-us/typography/opentype/spec/ttochap1#ltrrtl",
    "suggestion": "Control of this feature should not generally be exposed to the user.",
    "sensitivity": "Left-to-right runs of text; also see Example above.",
    "interaction": "This feature is to be applied simultaneously with other pre-shaping features such as 'ccmp' and 'locl'."
  },
  "mark": {
    "friendlyName": "Mark Positioning",
    "registeredBy": "Microsoft",
    "function": "Positions mark glyphs with respect to base glyphs.",
    "example": "In the Arabic script, positioning the Hamza above the Yeh.",
    "implementation": "This feature may be implemented as a MarkToBase Attachment lookup (GPOS LookupType = 4) or a MarkToLigature Attachment lookup (GPOS LookupType = 5).",
    "interface": "In recommended usage, this feature triggers positioning of mark glyphs required for correct layout. It should always be applied.",
    "suggestion": "Control of this feature should not generally be exposed to the user.",
    "sensitivity": "None.",
    "interaction": "None."
  },
  "med2": {
    "friendlyName": "Medial Forms #2",
    "registeredBy": "Microsoft",
    "function": "Used to replace Alaph glyphs in the middle of Syriac words when the preceding base character can be joined to. This feature is used only for the Syriac script Alaph character.",
    "example": "When an Alaph is preceded by a Heth, the Alaph would be replaced by an appropriate form.",
    "implementation": "Default alphabetic forms are mapped to corresponding medial forms (GSUB lookup type 1).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct layout of Syriac text. The application should always apply the feature to the Alaph glyph when the preceding base character is a joining character.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used only with the Syriac script.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. See also 'init' and 'fina'."
  },
  "medi": {
    "friendlyName": "Medial Forms",
    "registeredBy": "Microsoft/Adobe",
    "function": "Replaces glyphs for characters that have applicable joining properties with an alternate form when occurring in a medial context. This applies to characters that have the Unicode Joining_Type property value Dual_Joining.<br/><br/>Unicode Joining_Type property values are obtained from the Unicode Character Database (UCD). Specifically, Joining_Type property values are documented in the UCD file, ArabicShaping.txt, the current version of which is available at http://www.unicode.org/Public/UCD/latest/ucd/ArabicShaping.txt.",
    "example": "In an Arabic-script font, the application would apply the 'medi' feature to the letter ARABIC LETTER QAF (U+0642 “ق”) when it follows a left-joining character and precedes a right-joining character, thereby replacing the default “ق” glyph with its dual-joining, medial form.",
    "implementation": "The 'medi' feature is used to map default forms to corresponding dual-joining, medial forms. This will usually be implemented using a single substitution (type 1) GSUB lookup, though contextual substitution GSUB lookups (types 5, 6 or 8) may also be appropriate.",
    "interface": "In recommended usage, this feature triggers substitutions that are required for correct display of cursively-connecting scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements. The application is responsible for parsing character strings and identifying which of the joining-related features — initial forms ('init'), medial forms ('medi'), terminal forms ('fina'), and isolated forms ('isol') — to apply to which glyphs, based on character Joining_Type properties. Additional factors, such as the presence of control characters, may also be considered.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Can be used in any script with joining behavior — that is, the scripts for which Joining_Type properties are given explicitly in ArabicShaping.txt.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. See also 'fina', 'init' and 'isol'."
  },
  "mgrk": {
    "friendlyName": "Mathematical Greek",
    "registeredBy": "Adobe",
    "function": "Replaces standard typographic forms of Greek glyphs with corresponding forms commonly used in mathematical notation (which are a subset of the Greek alphabet).",
    "example": "The user applies this feature to U+03A3 (Sigma), and gets U+2211 (summation).",
    "implementation": "The 'mgrk' table maps Greek glyphs to the corresponding forms used for mathematics (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. Note: This is a change of semantic value. Besides the original character codes, the application should store the code for the new character.",
    "suggestion": "This feature should be off by default in most applications. Math-oriented applications may want to activate this feature by default.",
    "sensitivity": "Used with Greek characters.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override."
  },
  "mkmk": {
    "friendlyName": "Mark to Mark Positioning",
    "registeredBy": "Microsoft",
    "function": "Positions marks with respect to other marks. Required in various non-Latin scripts like Arabic.",
    "example": "In Arabic, the ligaturised mark Ha with Hamza above it; can also be obtained by positioning these marks relative to one another.",
    "implementation": "This feature may be implemented as a MarkToMark Attachment lookup (GPOS lookup type 6).",
    "interface": "In recommended usage, this feature triggers positioning of mark glyphs required for correct layout. It should always be applied.",
    "suggestion": "Control of this feature should not generally be exposed to the user.",
    "sensitivity": "None.",
    "interaction": "None."
  },
  "mset": {
    "friendlyName": "",
    "registeredBy": "Microsoft",
    "function": "Positions Arabic combining marks in fonts for Windows 95 using glyph substitution.<br/><br/>Note: This feature is not recommended for use in new fonts.",
    "example": "In Arabic, the Hamza is positioned differently when placed above a Yeh Barree as compared to the Alef.",
    "implementation": "(Windows 95) In contrast to the 'mark' feature, 'mset' uses glyph substitution to combine marks and base glyphs. It replaces a default mark glyph with a correctly positioned mark glyph. The font designer specifies the position of the mark when describing the mark’s contour in the font file. Microsoft’s Arabic fonts, created for Windows 95, use a contextual substitution lookup (GSUB LookupType = 5) to implement the 'mset' feature.",
    "interface": "",
    "suggestion": "",
    "sensitivity": "",
    "interaction": ""
  },
  "nalt": {
    "friendlyName": "Alternate Annotation Forms",
    "registeredBy": "Adobe",
    "function": "Replaces default glyphs with various notational forms (e.g. glyphs placed in open or solid circles, squares, parentheses, diamonds or rounded boxes). In some cases an annotation form may already be present, but the user may want a different one.",
    "example": "The user invokes this feature to get U+3200 (the circled form of “ga”) from U+3131 (hangul “ga”).",
    "implementation": "The 'nalt' table maps GIDs for various standard forms to one or more corresponding annotation forms. While many of these substitutions are one-to-one (GSUB lookup type 1), others require a selection from a set (GSUB lookup type 3). The manufacturer may choose to build two tables (one for each lookup type) or only one which uses lookup type 3 for all substitutions. If more than one form is present, the set of forms for each character should be ordered consistently - both within the font and across the family.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. If implemented in a font using an alternate substitution lookup, the application selects one of the alternative glyphs based on user choice or other criteria.",
    "suggestion": "This feature should be inactive by default. When implemented in the font using an alternate substitution lookup, the application must provide a means for the user to select the desired form from the alternative glyphs mapped in the lookup. It can note the position of the selected form in a set of alternates, and offer the glyph at that position as the default selection the next time this feature is invoked. In the absence of such prior information, the application may assume that the first glyph in a set is the preferred form, so the font developer should order them accordingly.",
    "sensitivity": "Used mostly in CJKV fonts, but can also be used for European scripts.",
    "interaction": "This feature is mutually exclusive with all other features, which should be turned off when it’s applied, except the 'vert' and 'vrt2' features, which may be used in addition."
  },
  "nlck": {
    "friendlyName": "NLC Kanji Forms",
    "registeredBy": "Adobe Systems Inc.",
    "function": "The National Language Council (NLC) of Japan has defined new glyph shapes for a number of JIS characters in 2000. The 'nlck' feature is used to access those glyphs.",
    "example": "",
    "implementation": "One-for-one substitution of non-NLC glyphs by the corresponding NLC glyph.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "Used only for Kanji characters in Japanese.",
    "interaction": "This feature is exclusive with the 'jp78', 'jp83', 'jp90' and similar features. It can be combined with the 'palt', 'vpal', 'vert' and 'vrt2' features."
  },
  "nukt": {
    "friendlyName": "Nukta Forms",
    "registeredBy": "Microsoft",
    "function": "Produces Nukta forms in Indic scripts.",
    "example": "In Hindi (Devanagari script), a consonant when combined with a nukta gives its nukta form.",
    "implementation": "The 'nukt' table maps the sequence of a consonant followed by a nukta to the consonant’s nukta form (GSUB lookup type 4).",
    "interface": "In recommended usage, this feature triggers substitutions that are required for correct display of the given script. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Indic or other Brahmi-derived scripts.",
    "interaction": "This feature is used in conjunction with certain other features to derive required forms of Indic scripts. The application is expected to process this feature and certain other features in an appropriate order to obtain the correct set of basic forms: 'nukt', 'akhn', 'rphf', 'rkrf', 'pref', 'blwf', 'half', 'pstf', 'cjct'. Other discretionary features for optional typographic effects may also be applied. Lookups for such discretionary features should be processed after lookups for this feature have been processed."
  },
  "numr": {
    "friendlyName": "Numerators",
    "registeredBy": "Adobe",
    "function": "Replaces selected figures (digits) which precede a slash with numerator figures, and replaces the typographic slash with the fraction slash.",
    "example": "In the string 11/17 selected by the user, the application turns the 11 into numerators, and the slash into a fraction slash when the user applies the fraction feature ('frac').",
    "implementation": "Glyphs for figures (digits) or other characters used in numbers (grouping or decimal separators) are mapped to corresponding numerator glyphs; and the glyph for slash (U+002F) is mapped to a fraction slash (glyph for U+2044). Substitutions are one-to-one (GSUB lookup type 1).",
    "interface": "In recommended usage, this feature is applied automatically as part of the application’s implementation for the 'frac' feature. See the 'frac' for details.",
    "suggestion": "In recommended usage, this feature is applied to sequences automatically by applications when the 'frac' feature is used, and direct user control is not required.",
    "sensitivity": "None.",
    "interaction": "This feature supports 'frac'. It may be used in combination with other substitution (GSUB) features, whose results it may override."
  },
  "onum": {
    "friendlyName": "Oldstyle Figures",
    "registeredBy": "Microsoft/Adobe",
    "function": "This feature changes selected figures from the default or lining style to oldstyle form.",
    "example": "The user invokes this feature to get oldstyle figures, which fit better into the flow of normal upper- and lowercase text. Various characters designed to be used with figures may also have oldstyle versions.",
    "implementation": "Glyphs for figures (digits) or other characters used in numbers (grouping or decimal separators) are mapped to corresponding oldstyle forms (GSUB lookup type 1). If the default figures are non-lining, they too are mapped to the corresponding oldstyle form.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature should be inactive by default. Users can switch between the default and oldstyle figure sets by turning this feature on or off. Note: This feature is separate from the figure-width features 'pnum' and 'tnum'. When the user changes figure style, the application may want to query whether a change in width is also desired.",
    "sensitivity": "None.",
    "interaction": "This feature overrides the results of the Lining Figures feature ('lnum')."
  },
  "opbd": {
    "friendlyName": "Optical Bounds",
    "registeredBy": "Adobe",
    "function": "Aligns glyphs by their apparent left or right extents in horizontal setting, or apparent top or bottom extents in vertical setting, replacing the default behavior of aligning glyphs by their origins. Another name for this behavior would be visual justification. The optical edge of a given glyph is only indirectly related to its advance width or bounding box; this feature provides a means for getting true visual alignment. Note: deprecated.",
    "example": "Succeeding lines beginning with T, D and W would shift to the left by varying amounts when the text is left-justified and this feature is applied. Succeeding lines ending with r, h and y would likewise shift to the right by differing degrees when the text is right-justified and this feature is applied.",
    "implementation": "Positioning adjustments (GPOS lookup type 1) are implemented in separate lookups associated with features for left, right, top and bottom line positions.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. The application implementation for this feature should make use of the 'lfbd' and 'rtbd' features: the 'lfbd' feature should be applied automatically to glyphs at the left end of a horizontal line; the 'rtbd' feature should be applied automatically to glyphs at the right end of a horizontal line. It affects the line length, which should be taken into consideration by line-breaking and justification algorithms.",
    "suggestion": "This feature should be active by default.",
    "sensitivity": "None.",
    "interaction": "Should not be applied to glyphs which use fixed-width features (e.g. 'fwid', 'halt', 'hwid', 'qwid' and 'twid') or vertical features (e.g. 'vert', 'vrt2', 'vpal', 'valt' and 'vhal'). Uses 'lfbd' and 'rtbd' features."
  },
  "ordn": {
    "friendlyName": "Ordinals",
    "registeredBy": "Adobe",
    "function": "Replaces default alphabetic glyphs with the corresponding ordinal forms for use after figures. One exception to the follows-a-figure rule is the numero character (U+2116), which is actually a ligature substitution, but is best accessed through this feature.",
    "example": "The user applies this feature to turn 2.o into 2.o (abbreviation for secundo).",
    "implementation": "Glyphs for various lowercase letters are mapped to corresponding ordinal forms using a chained-context substitution (GSUB lookup type 6); and the sequence of default glyphs for “No” are mapped to a numero ligature glyph (GSUB lookup type 4).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. When processing lookups, context before or after the glyph sequence to which the feature is applied must be considered. Note: This may be a change of semantic value. Besides the original character codes, the application should store the code for the new character.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "Used mostly for Latin script.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override."
  },
  "ornm": {
    "friendlyName": "Ornaments",
    "registeredBy": "Adobe",
    "function": "This is a dual-function feature, which uses two input methods to give the user access to ornament glyphs (e.g. fleurons, dingbats and border elements) in the font. One method replaces the bullet character with a selection from the full set of available ornaments; the other replaces specific “lower ASCII” characters with ornaments assigned to them. The first approach supports the general or browsing user; the second supports the power user.",
    "example": "The user inputs “qwwwwwwwwwe” to form the top of a flourished box in Adobe Caslon, or inputs the bullet character, then chooses the thistle dingbat.",
    "implementation": "All ornament glyphs are mapped from the default glyph of the bullet character (U+2022) as alternates (GSUB lookup type 3); or ornament glyphs are mapped from the default glyph of corresponding alphanumeric characters (GSUB lookup type 1). The manufacturer may choose to build two tables (one for each lookup type) or only one which uses lookup type 3 for all substitutions. As in any alternate substitution lookup, alternates present in more than one face should be ordered consistently across a family, so that those alternates can work correctly when switching between family members.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. When this feature is invoked, the application must note whether the selected text is the bullet character (U+2022) or alphanumeric characters. In the first case, it retrieves the glyphs mapped from the bullet glyph, and gives the user a means to select from among them. In the second case, a substitution is applied directly.",
    "suggestion": "This feature should be inactive by default. When implemented in the font using an alternate substitution looup (the bullet case), an application could display the forms sequentially in context, or present a palette showing all the forms at once, or give the user a choice between these approaches. Once the user has selected a specific ornament, that one should be the default selection the next time the bullet is typed. In the absence of such prior information, the application may assume that the first ornament in a set is the preferred form, so the font developer should order them accordingly.",
    "sensitivity": "None.",
    "interaction": "This feature is mutually exclusive with all other substitution (GSUB) features, which should be turned off when it’s applied."
  },
  "palt": {
    "friendlyName": "Proportional Alternate Widths",
    "registeredBy": "Adobe",
    "function": "Re-spaces glyphs designed to be set on full-em widths, fitting them onto individual (more or less proportional) horizontal widths. This differs from 'pwid' in that it does not substitute new glyphs (GPOS, not GSUB feature). The user may prefer the monospaced form, or may simply want to ensure that the glyph is well-fit and not rotated in vertical setting (Latin forms designed for proportional spacing would be rotated).",
    "example": "The user may invoke this feature in a Japanese font to get Latin, Kanji, Kana or Symbol glyphs with the full-width design but individual metrics.",
    "implementation": "The font specifies alternate metrics for the full-width glyphs (GPOS lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature would be off by default.",
    "sensitivity": "Used mostly in CJKV fonts.",
    "interaction": "This feature is mutually exclusive with all other glyph-width features (e.g. 'fwid', 'halt', 'hwid', 'qwid' and 'twid'), which should be turned off when it’s applied. If 'palt' is activated, there is no requirement that 'kern' must also be activated. If 'kern' is activated, 'palt' must also be activated if it exists. See also 'vpal'."
  },
  "pcap": {
    "friendlyName": "Petite Capitals",
    "registeredBy": "Tiro Typeworks / Emigre",
    "function": "Some fonts contain an additional size of capital letters, shorter than the regular smallcaps and whimsically referred to as petite caps. Such forms are most likely to be found in designs with a small lowercase x-height, where they better harmonise with lowercase text than the taller smallcaps (for examples of petite caps, see the Emigre type families Mrs Eaves and Filosofia). This feature turns glyphs for lowercase characters into petite capitals. Forms related to petite capitals, such as specially designed figures, may be included.<br/><br/>Note: Some languages written with bicameral scripts have special case-mapping behaviors for certain characters. Care is needed by font and application developers to handle these cases correctly. See the 'smcp' feature for more information.",
    "example": "The user enters text as lowercase or mixed case, and gets petite cap text or text with regular uppercase and petite caps. Note that some designers, might extend the petite cap lookups to include uppercase-to-smallcap substitutions, creating a shifting hierarchy of uppercase forms.",
    "implementation": "The 'pcap' table maps lowercase glyphs to the corresponding petite cap forms (GSUB lookup type 1).<br/><br/>Correct handling of case mapping for some languages may require exceptions to be handled using separate language systems. Also, some applications may handle language-specific case mappings by mapping the lowercase characters to appropriate uppercase characters in a temporary buffer and then applying the 'c2pc' feature. Fonts that implement 'pcap' should also implement the 'c2pc' feature. See the 'smcp' feature for more information.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.<br/><br/>For best handling of language-specific case mapping behaviors, applications can implement petite-cap formatting by mapping lowercase characters to uppercase in a temporary buffer and then applying the 'c2pc' feature. See the 'smcp' feature for more information.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "Applies only to scripts with both upper- and lowercase forms (e.g. Latin, Cyrillic, Greek).",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override."
  },
  "pkna": {
    "friendlyName": "Proportional Kana",
    "registeredBy": "Adobe",
    "function": "Replaces glyphs, kana and kana-related, set on uniform widths (half or full-width) with proportional glyphs.",
    "example": "The user may invoke this feature in a Japanese font to get a proportional glyph instead of a corresponding half- or full-width kana glyph.",
    "implementation": "The font contains alternate kana and kana-related glyphs designed to be set on proportional widths (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature would normally be off by default.",
    "sensitivity": "Generally used only in Japanese fonts.",
    "interaction": "This feature is mutually exclusive with all other glyph-width features (e.g. 'fwid', 'halt', 'hwid', 'palt', 'pwid', 'qwid', 'twid', and 'vhal'), which should be turned off when it’s applied. Applying this feature should activate the 'kern' feature."
  },
  "pnum": {
    "friendlyName": "Proportional Figures",
    "registeredBy": "Microsoft/Adobe",
    "function": "Replaces figure glyphs set on uniform (tabular) widths with corresponding glyphs set on glyph-specific (proportional) widths. Tabular widths will generally be the default, but this cannot be safely assumed. Of course this feature would not be present in monospaced designs.",
    "example": "The user may apply this feature to get even spacing for lining figures used as dates in an all-cap headline.",
    "implementation": "In order to simplify associated kerning and get the best glyph design for a given width, this feature should use new glyphs for the figures, rather than only adjusting the fit of the tabular glyphs (although some may be simple copies); i.e. not a GPOS feature. The 'pnum' table maps tabular versions of lining and/or oldstyle figures to corresponding proportional glyphs (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature should be off by default. The application may want to query the user about this feature when the user changes figure style ('onum' or 'lnum').",
    "sensitivity": "None.",
    "interaction": "This feature overrides the results of the Tabular Figures feature ('tnum')."
  },
  "pref": {
    "friendlyName": "Pre-base Forms",
    "registeredBy": "Microsoft",
    "function": "Substitutes the pre-base form of a consonant.<br/><br/>In some scripts of south or southeast Asia, such as Khmer, the conjoined form of certain consonants is always denoted as a pre-base form. In the case of some scripts of south India, variations in writing conventions exist such that a conjoined Ra consonant may be written as a pre-base form, or a below-base or post-base form. Fonts may be designed to support one or another convention. If a font is designed to support a writing convention in which conjoined Ra is a pre-base form, the Pre-Base Forms feature would be used.",
    "example": "In the Khmer script, the consonant Ra has a pre-base subscript form called Coeng Ra. When the sequence of Coeng followed by Ra occurs, its pre-base form is substituted.",
    "implementation": "The 'pref' table maps the sequence required to convert a consonant into its pre-base form (GSUB lookup type 4).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct layout of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements. The effect of lookups associated with this feature may be used by the application to control subsequent reordering of conjoined consonant glyphs, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Khmer, Myanmar (Burmese) and other Brahmi-derived scripts that may display a pre-base form of Ra.",
    "interaction": "This feature is used in conjunction with certain other features to derive required forms of certain Indic and southeast Asian scripts. The application is expected to process this feature and certain other features in an appropriate order to obtain the correct set of basic forms for the given script. For Indic scripts, the following features should be applied in order: 'nukt', 'akhn', 'rphf', 'rkrf', 'pref', 'blwf', 'half', 'pstf', 'cjct'. Other discretionary features for optional typographic effects may also be applied. Lookups for such discretionary features should be processed after lookups for this feature have been processed."
  },
  "pres": {
    "friendlyName": "Pre-base Substitutions",
    "registeredBy": "Microsoft",
    "function": "Produces the pre-base forms of conjuncts in Indic scripts. It can also be used to substitute the appropriate glyph variant for pre-base vowel signs.",
    "example": "In the Gujarati (Indic) script, the doubling of consonant Ka requires the first Ka to be substituted by its pre-base form. This in turn ligates with the second Ka. Applying this feature would result in the ligaturised version of the doubled Ka.",
    "implementation": "The 'pres' table maps a sequence of consonants separated by the virama (halant), to the ligated conjunct form (GSUB lookup type 4). In the case of pre-base matra substitution, the appropriate matra can be substituted using contextual substitution (GSUB lookup type 5).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct display of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Indic or other Brahmi-derived scripts.",
    "interaction": "This feature overrides the results of all other features."
  },
  "pstf": {
    "friendlyName": "Post-base Forms",
    "registeredBy": "Microsoft",
    "function": "Substitutes the post-base form of a consonant.",
    "example": "In the Gurmukhi (Indic) script, the consonant Ya has a post base form. When the Ya is used as the second consonant in conjunct formation, its post-base form is substituted.",
    "implementation": "The 'pstf' table maps the sequence required to convert a consonant into its post-base form (GSUB lookup type 4).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct display of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for scripts of south and southeast Asia that have post-base forms for consonants eg: Gurmukhi, Malayalam, Khmer.",
    "interaction": "This feature is used in conjunction with certain other features to derive required forms of Indic and other related scripts. The application is expected to process this feature and certain other features in an appropriate order to obtain the correct set of basic forms for the given script. For Indic scripts, the following features should be applied in order: 'nukt', 'akhn', 'rphf', 'rkrf', 'pref', 'blwf', 'half', 'pstf', 'cjct'. Other discretionary features for optional typographic effects may also be applied. Lookups for such discretionary features should be processed after lookups for this feature have been processed."
  },
  "psts": {
    "friendlyName": "Post-base Substitutions",
    "registeredBy": "Microsoft",
    "function": "Substitutes a sequence of a base glyph and post-base glyph, with its ligaturised form.",
    "example": "In the Malayalam (Indic) script, the consonant Va has a post base form. When the Va is doubled to form a conjunct- VVa; the first Va [base] and the post base form that follows it, is substituted with a ligature.",
    "implementation": "The 'psts' table maps identified conjunct formation sequences to corresponding ligatures (GSUB lookup type 4).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct display of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Indic or other Brahmi-derived scripts.",
    "interaction": "This feature overrides the results of all other features."
  },
  "pwid": {
    "friendlyName": "Proportional Widths",
    "registeredBy": "Adobe",
    "function": "Replaces glyphs set on uniform widths (typically full or half-em) with proportionally spaced glyphs. The proportional variants are often used for the Latin characters in CJKV fonts, but may also be used for Kana in Japanese fonts.",
    "example": "The user may invoke this feature in a Japanese font to get a proportionally-spaced glyph instead of a corresponding half-width Roman glyph or a full-width Kana glyph.",
    "implementation": "The font contains alternate glyphs designed to be set on proportional widths (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "Applications may want to have this feature active or inactive by default depending on their markets.",
    "sensitivity": "Although used mostly in CJKV fonts, this feature could be applied in European scripts.",
    "interaction": "This feature is mutually exclusive with all other glyph-width features (e.g. 'fwid', 'halt', 'hwid', 'palt', 'qwid', 'twid', 'valt' and 'vhal'), which should be turned off when it’s applied. Applying this feature should activate the 'kern' feature."
  },
  "qwid": {
    "friendlyName": "Quarter Widths",
    "registeredBy": "Adobe",
    "function": "Replaces glyphs on other widths with glyphs set on widths of one quarter of an em (half an en). The characters involved are normally figures and some forms of punctuation.",
    "example": "The user may apply 'qwid' to place a four-digit figure in a single slot in a column of vertical text.",
    "implementation": "The font may contain alternate glyphs designed to be set on quarter-em widths (GSUB lookup type 1), or it may specify alternate metrics for the original glyphs (GPOS lookup type 1) which adjust their spacing to fit in quarter-em widths.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature would normally be off by default.",
    "sensitivity": "Generally used only in CJKV fonts.",
    "interaction": "This feature is mutually exclusive with all other glyph-width features (e.g. 'fwid', 'halt', 'hwid' and 'twid'), which should be turned off when it’s applied. It deactivates the 'kern' feature."
  },
  "rand": {
    "friendlyName": "Randomize",
    "registeredBy": "Adobe",
    "function": "In order to emulate the irregularity and variety of handwritten text, this feature allows multiple alternate forms to be used.",
    "example": "The user applies this feature in FF Kosmic to get three forms of f in one word.",
    "implementation": "The rand table maps GIDs for default glyphs to one or more GIDs for corresponding alternates (GSUB lookup type 3).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. The feature is designed to be used with an alternate substitution lookup that provides a selection of alternate glyphs for a given character. The application selects one of these either by a pseudo-random algorithm, or by noting the sequence of IDs returned, storing that sequence, and stepping through that set as the corresponding character code is invoked.",
    "suggestion": "When supported by the font, the feature should be enabled by default. In recommended usage, the application selects a glyph alternate automatically and does not need to present the alternates for the user to make a selection.",
    "sensitivity": "None.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override."
  },
  "rclt": {
    "friendlyName": "Required Contextual Alternates",
    "registeredBy": "Microsoft",
    "function": "In specified situations, replaces default glyphs with alternate forms which provide for better joining behavior or other glyph relationships. Especially important in script typefaces which are designed to have some or all of their glyphs join, but applicable also to e.g. variants to improve spacing. This feature is similar to 'calt', but with the difference that it should not be possible to turn off 'rclt' substitutions: they are considered essential to correct layout of the font.",
    "example": "In an Arabic calligraphic font the 'rclt' feature is used to contextually substitute variant forms of letters sin and yeh providing for a correct join between these two letters that differs from the default join of either to other letters.",
    "implementation": "The 'rclt' table specifies the context in which each substitution occurs, and maps one or more default glyphs to replacement glyphs (GSUB lookup type 6).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct display of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements. When processing lookups, context before or after the glyph sequence to which the feature is applied must be considered.",
    "suggestion": "Control of this feature should not generally be exposed to the user.",
    "sensitivity": "May be used for any script, but is especially important for many styles of Arabic.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. For complex scripts, lookups for this feature should be ordered and processed after basic script and language shaping features."
  },
  "rkrf": {
    "friendlyName": "Rakar Forms",
    "registeredBy": "Microsoft",
    "function": "Produces conjoined forms for consonants with rakar in Devanagari and Gujarati scripts.<br/><br/>In Devanagari and Gujarati scripts, consonant clusters involving Ra following another consonant are denoted by conjoining an alternate form of Ra to the preceding consonant. Depending on the particular syllable, the preceding consonant may be denoted in its full form or as a half form. Because of interactions involving other behaviors of these scripts, a font implementation may need to process substitution lookups for rakar forms and half forms in a particular sequence in order to derive the appropriate display for various sequences. In recommended usage, the Rakar Forms feature is processed before the Half Forms feature; a half form for a given consonant-Ra combination can be derived by subsequent application of the Half Forms feature. This sequential ordering allows for correct display results.",
    "example": "In Hindi (Devanagari script), the conjunct KRa is denoted with a conjunct ligature form.",
    "implementation": "The 'rkrf' table maps the sequence of a consonant (the nominal form only) followed by a virama (halant) followed by Ra (the nominal form) to the corresponding conjoined form (GSUB lookup type 4).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct display of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Devanagari, Gujarati, and other Brahmi-derived scripts.",
    "interaction": "This feature is used in conjunction with certain other features to derive required forms of Indic scripts. The application is expected to process this feature and certain other features in an appropriate order to obtain the correct set of basic forms: 'nukt', 'akhn', 'rphf', 'rkrf', 'pref', 'blwf', 'half', 'pstf', 'cjct'. Other discretionary features for optional typographic effects may also be applied. Lookups for such discretionary features should be processed after lookups for this feature have been processed."
  },
  "rlig": {
    "friendlyName": "Required Ligatures",
    "registeredBy": "Microsoft",
    "function": "Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. This feature covers those ligatures, which the script determines as required to be used in normal conditions. This feature is important for some scripts to insure correct glyph formation.",
    "example": "The Arabic character lam followed by alef will always form a ligated lamalef form. This ligated form is a requirement of the script’s shaping. The same happens with the Syriac script.",
    "implementation": "Glyph sequences are mapped to a single, ligature glyph (GSUB lookup type 4). Note that, if multiple sequences have the same initial sub-sequence, substitutions for longer sequences should be stored ahead of those for shorter sequences.",
    "interface": "In recommended usage, this feature triggers substitutions required for correct display of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of this feature should not generally be exposed to the user.",
    "sensitivity": "Used for Arabic and Syriac. May also be used for other scripts.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. See also 'liga'."
  },
  "rphf": {
    "friendlyName": "Reph Form",
    "registeredBy": "Microsoft",
    "function": "Substitutes the Reph form for a consonant and halant sequence.",
    "example": "In the Devanagari (Indic) script, the consonant Ra possesses a reph form. When the Ra is a syllable initial consonant and is followed by the virama, it is repositioned after the post base vowel sign within the syllable, and also substituted with a mark that sits above the base glyph.",
    "implementation": "A 'rphf' lookup table maps the sequence of default form of Ra and virama to the Reph (GSUB lookup type 4).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct display of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Indic or other Brahmi-derived scripts.",
    "interaction": "This feature is used in conjunction with certain other features to derive required forms of Indic scripts. The application is expected to process this feature and certain other features in an appropriate order to obtain the correct set of basic forms: 'nukt', 'akhn', 'rphf', 'rkrf', 'pref', 'blwf', 'half', 'pstf', 'cjct'. Other discretionary features for optional typographic effects may also be applied. Lookups for such discretionary features should be processed after lookups for this feature have been processed."
  },
  "rtbd": {
    "friendlyName": "Right Bounds",
    "registeredBy": "Adobe",
    "function": "Aligns glyphs by their apparent right extents at the right ends of horizontal lines of text, replacing the default behavior of aligning glyphs by their origins.",
    "example": "Succeeding lines ending with r, h and y would shift to the right by differing degrees when the text is right-justified and this feature is applied.",
    "implementation": "Values for affected glyphs describe the amount by which the placement and advance width should be altered (GPOS lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. In recommended usage, the application applies this feature to characters at the right end of a horizontal line when paragraphs are right or left and right justified.",
    "suggestion": "This feature should be inactive by default. Applications may expose to users direct control of this feature and also the Left Bounds feature ('lfbd'), or may automatically activate the feature based on other paragraph layout settings.",
    "sensitivity": "None.",
    "interaction": "Should not be applied to glyphs which use fixed-width features (e.g. 'fwid', 'halt', 'hwid', 'qwid' and 'twid') or vertical features (e.g. 'vert', 'vrt2', 'vpal', 'valt' and 'vhal')."
  },
  "rtla": {
    "friendlyName": "Right-to-left alternates",
    "registeredBy": "Adobe",
    "function": "This feature applies glyphic variants (other than mirrored forms) appropriate for right-to-left text. (For mirrored forms, see 'rtlm'.)",
    "example": "",
    "implementation": "These are required to be glyph substitutions, and it is recommended that they be one-to-one (GSUB lookup type 1).",
    "interface": "See section “Left-to-right and right-to-left text” on the Advanced Typographic Extensions page. https://learn.microsoft.com/en-us/typography/opentype/spec/ttochap1#ltrrtl",
    "suggestion": "Control of this feature should not generally be exposed to the user.",
    "sensitivity": "Right-to-left runs of text.",
    "interaction": "This feature is to be applied simultaneously with other pre-shaping features such as 'ccmp' and 'locl'."
  },
  "rtlm": {
    "friendlyName": "Right-to-left mirrored forms",
    "registeredBy": "Adobe",
    "function": "This feature applies mirrored forms appropriate for right-to-left text other than for those characters that would be covered by the character-level mirroring step performed by an OpenType layout engine. (For right-to-left glyph alternates, see 'rtla'.)",
    "example": "The 'rtlm' feature replaces the glyph for U+2232, CLOCKWISE CONTOUR INTEGRAL, with one in which the integral sign is mirrored but the circular arrow has retained its direction.",
    "implementation": "These are required to be glyph substitutions, and it is recommended that they be one-to-one (GSUB lookup type 1).",
    "interface": "See section “Left-to-right and right-to-left text” on the Advanced Typographic Extensions page. https://learn.microsoft.com/en-us/typography/opentype/spec/ttochap1#ltrrtl",
    "suggestion": "Control of this feature should not generally be exposed to the user.",
    "sensitivity": "Right-to-left runs of text.",
    "interaction": "This feature is to be applied simultaneously with other pre-shaping features such as 'ccmp' and 'locl'."
  },
  "ruby": {
    "friendlyName": "Ruby Notation Forms",
    "registeredBy": "Adobe",
    "function": "Japanese typesetting often uses smaller kana glyphs, generally in superscripted form, to clarify the meaning of kanji which may be unfamiliar to the reader. These are called “ruby”, from the old typesetting term for four-point-sized type. This feature identifies glyphs in the font which have been designed for this use, substituting them for the default designs.",
    "example": "The user applies this feature to the kana character U+3042, to get the ruby form for annotation.",
    "implementation": "The font contains alternate glyphs for all kana characters which are enabled for ruby notation. The 'ruby' table maps GIDs for default forms to GIDs for corresponding ruby alternates. These are one-to-one substitutions (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. After associated lookups are applied, applications may re-size or scale glyphs or perform other positioning or layout adjustments based on other parameters.",
    "suggestion": "This feature should be inactive by default. Applications may offer the user an opportunity to specify the degree of scaling and baseline shift.",
    "sensitivity": "Used for Japanese.",
    "interaction": "This feature overrides the results of any other feature for the affected characters."
  },
  "rvrn": {
    "friendlyName": "Required Variation Alternates",
    "registeredBy": "Microsoft",
    "function": "This feature is used in fonts that support OpenType Font Variations in order to select alternate glyphs for particular variation instances. (For background on OpenType Font Variations, see OpenType Font Variations Overview. https://learn.microsoft.com/en-us/typography/opentype/spec/otvaroverview)<br/><br/>When a variable font is used, all of the interpolated variants of a given glyph ID have exactly the same contours and points. It is possible to use glyph variation mechanisms to make significant outline changes, such as reducing strokes in heavy-weight or narrow-width variants, but this approach may be difficult to implement and may not produce desired results for all variation instances. Instead, better results for these scenarios might be achieved by substitution to a different glyph ID. The specific substitutions applied would be conditioned by the particular variation instance that is selected by the user. This conditional behavior is implemented using the required variation alternates feature in conjunction with a FeatureVariations table within the GSUB table.",
    "example": "A variable font supports weight variations ranging from thin to black. The default glyph for the dollar sign has two vertical strokes running through the full extent of the glyph. In the bold variation instance, the default glyph is substituted to an alternate glyph that has only one vertical stroke. In the black variation instance, the default glyph is substituted to an alternate glyph have has only single vertical bars at the top and bottom extremities, with no vertical bars in the two counters in between.",
    "implementation": "The feature is used to activate single substitution (GSUB type 1) lookups, and is always used in conjunction with a FeatureVariations table. Typically, a Feature table referenced in a FeatureRecord with the 'rvrn' tag will have LookupCount set to 0; in this way, the default variation instance does not have any glyph substitution applied but, rather, uses default glyphs. Alternate glyphs for particular variation instances are obtained by adding a substitution of the feature table to an alternate feature table within a FeatureVariations table. Different alternate feature tables may be selected using condition sets that specify particular variation-axis value ranges.<br/><br/>One or more Condition tables is used to determine variation-axis value ranges for which an alternate feature table (and associated lookups) is selected. The axis values used to trigger a condition should normally be midway between values used for named instances. This will avoid any possibility of inconsistent behavior in different applications when using named instances that might arise due to small discrepancies in processing the numeric values.<br/><br/>The default language system for the DFLT script can reference a feature record for this feature with a feature table that will be substituted for particular variation instances to use lookups that apply default, language-independent glyph substitutions; this feature record should be the first feature record for this feature. Some applications may choose to process this feature without processing other features or the script/language system hierarchy; for this purpose, they should choose the first feature record for this feature to obtain the most suitable substitutions for language-independent results.",
    "interface": "Application of the 'rvrn' feature is mandatory in implementations that support OpenType Font Variations whenever a variable font is in use. The feature should be processed in any layout process that supports use of variations, even if other OpenType Layout processing is not supported.<br/><br/>The feature is applied only during the process of deriving final glyph IDs (GSUB); it is not used for glyph positioning (GPOS). It should be processed early in GSUB processing, before application of the localized forms feature or features related to shaping of complex scripts or discretionary typographic effects.<br/><br/>Processing of the 'rvrn' feature also requires processing of the FeatureVariations table. ConditionSet tables are scanned for a ConditionSet matching the current variation instance, and then a corresponding FeatureTableSubstitution table is used to locate an alternate feature table. For complete details on processing a FeatureVariations table, see OpenType Layout Common Table Formats.<br/><br/>When an applicable feature table is located, only single substitution (GSUB type 1) lookups are processed; any other lookup types are ignored. For any glyph IDs in the coverage table, the application passes the glyph ID to the lookup, and gets back the new glyph ID.",
    "suggestion": "The 'rvrn' feature is mandatory: it should be active by default and not directly exposed to user control.",
    "sensitivity": "None.",
    "interaction": "The feature should be processed early after initial character-to-glyph mapping, before application of the localized forms ('locl') feature, any features related to shaping of complex scripts, or any discretionary features."
  },
  "salt": {
    "friendlyName": "Stylistic Alternates",
    "registeredBy": "Adobe",
    "function": "Many fonts contain alternate glyph designs for a purely esthetic effect; these don’t always fit into a clear category like swash or historical. As in the case of swash glyphs, there may be more than one alternate form. This feature replaces the default forms with the stylistic alternates.",
    "example": "The user applies this feature to Industria to get the alternate form of g.",
    "implementation": "The 'salt' table maps GIDs for default forms to one or more GIDs for corresponding stylistic alternatives. While many of these substitutions are one-to-one (GSUB lookup type 1), others require a selection from a set (GSUB lookup type 3). The manufacturer may choose to build two tables (one for each lookup type) or only one which uses lookup type 3 for all substitutions. As in any one-from-many substitution, alternates present in more than one face should be ordered consistently across a family, so that those alternates can work correctly when switching between family members.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. If implemented in a font using an alternate substitution lookup, the application selects one of the alternative glyphs based on user choice or other criteria.",
    "suggestion": "This feature should be inactive by default. When implemented in the font using an alternate substitution lookup, an application could display the forms sequentially in context, or present a palette showing all the forms at once, or give the user a choice between these approaches. The application may assume that the first glyph in a set is the preferred form, so the font developer should order them accordingly.",
    "sensitivity": "None.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override."
  },
  "sinf": {
    "friendlyName": "Scientific Inferiors",
    "registeredBy": "Microsoft/Adobe",
    "function": "Replaces lining or oldstyle figures (digits) with inferior figures (smaller glyphs which sit lower than the standard baseline, primarily for chemical or mathematical notation). May also replace glyphs for lowercase characters with alphabetic inferiors.",
    "example": "The application can use this feature to automatically access the inferior figures (more legible than scaled figures).",
    "implementation": "Glyphs for figures (digits) are mapped to corresponding inferior forms (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "None.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override."
  },
  "size": {
    "friendlyName": "Optical size",
    "registeredBy": "Adobe",
    "function": "This feature stores two kinds of information about the optical size of the font: design size (the point size for which the font is optimized) and size range (the range of point sizes which the font can serve well), as well as other information which helps applications use the size range. The design size is useful for determining proper tracking behavior. The size range is useful in families which have fonts covering several ranges. Additional values serve to identify the set of fonts which share related size ranges, and to identify their shared name. Note that sizes refer to nominal final output size, and are independent of viewing magnification or resolution.<br/><br/>Note: Use of this feature has been superseded by the STAT table.",
    "example": "The 'size' information in Bell Centennial is [60 0 0 0 0]. This tells an application that the font’s design size is six points, so larger sizes may need proportionate reduction in default inter-glyph spacing. The 'size' information in Minion Pro Semibold Condensed Subhead is [180 3 257 139 240]. These values tell an application that:<br/><br/>The font’s design size is 18 points;<br/>This font is part of a subfamily of fonts that differ only by the size range which each covers, and which share the arbitrary identifier number 3;<br/>ID 257 in the 'name' table is the suggested menu name for this subfamily. In this case, the string at name ID 257 is Semibold Condensed;<br/>This font is the recommended choice from sizes greater than 13.9-point up through 24-points.",
    "implementation": "Note: required implementation<br/><br/>The Feature table of this GPOS feature contains no lookups; its featureParamsOffset field records an offset from the beginning of the Feature table to an array of five uint16 values. The size feature must be implemented in all fonts in any family which uses the feature. In this usage, a family is a set of fonts which share a Typographic Family name (name ID 16), or Font Family name (name ID 1) if the Typographic Family name is absent.<br/><br/>The first value represents the design size in 720/inch units (decipoints). The design size entry must be non-zero. When there is a design size but no recommended size range, the rest of the array will consist of zeros.<br/>The second value has no independent meaning, but serves as an identifier that associates fonts in a subfamily. All fonts which share a Typographic or Font Family name and which differ only by size range shall have the same subfamily value, and no fonts which differ in weight or style shall have the same subfamily value. If this value is zero, the remaining fields in the array will be ignored.<br/>The third value enables applications to use a single name for the subfamily identified by the second value. If the preceding value is non-zero, this value must be set in the range 256 – 32767 (inclusive). It records the value of a field in the 'name' table, which must contain English-language strings encoded in Windows Unicode and Macintosh Roman, and may contain additional strings localized to other scripts and languages. Each of these strings is the name an application should use, in combination with the family name, to represent the subfamily in a menu. Applications will choose the appropriate version based on their selection criteria.<br/>The fourth and fifth values represent the small end of the recommended usage range (exclusive) and the large end of the recommended usage range (inclusive), stored in 720/inch units (decipoints). Ranges must not overlap, and should generally be contiguous.",
    "interface": "When the user specifies a size, the application checks for a 'size' feature in the active font. If none is found, the application follows its default behavior. If one is found, the application follows the specified offset to retrieve the five values.<br/><br/>Design size: Applications which offer size-based tracking have a pre-defined curve which they can apply. By default, this curve should be set to produce no adjustment at the font’s design size (first value in the array, in decipoints).<br/>Size ranges: If the second value in the 'size' array is non-zero, the font has a recommended size range. When any such font is selected by the user, the application builds a list of all fonts with this subfamily value and the same Typographic Family name, and notes the size range in the current font. Applications may want to cache the subfamily list at this point. If the specified size falls in the current font’s range, the application uses the current font. If not, the application checks the other ranges in the subfamily, and if the specified size falls in one of them, uses that font. If the specified size is not in any range present, the font with the range closest to the specified value is used. If the specified size falls exactly between two ranges, the range with the larger values is used. Since adding or removing fonts from a subfamily may cause reflow, applications should note which fonts are used for which text.",
    "suggestion": "This feature should be active by default. Applications may want to present the tracking curve to the user for adjustments via a GUI. At start-up, and when fonts are added or removed, applications may want to build a list of fonts with such ranges, and display the filtered subfamily names in their font selection UI, with each filtered name representing the full set of related sizes. Applications may also present a setting which allows the user to select non-default sizes (for example, in the case where final output is intended for on-screen viewing, a smaller optical size will produce better results). In such a case, the font-selection UI should present the unfiltered names. Applications should notify the user if fonts are removed or added from a subfamily with size ranges, and query about desired behavior.",
    "sensitivity": "None.",
    "interaction": "None."
  },
  "smcp": {
    "friendlyName": "Small Capitals",
    "registeredBy": "Microsoft/Adobe",
    "function": "This feature turns glyphs for lowercase characters into small capitals. It is generally used for display lines set in Large & small caps, such as titles. Forms related to small capitals, such as oldstyle figures, may be included.<br/><br/>Note: Some languages written with bicameral scripts have special case-mapping behaviors for certain characters. Care is needed by font and application developers to handle these cases correctly. See The Unicode Standard, “5.18 Case Mappings”, for more information.",
    "example": "The user enters text as mixed capitals and lowercase, and gets Large & small cap text.",
    "implementation": "Glyphs for lowercase characters are mapped to the corresponding small-cap forms (GSUB lookup type 1).<br/><br/>Correct handling of case mapping for some languages may require exceptions to be handled using separate language systems. For example, correct handling of Turkish dotted and undotted i could be implemented using a 'TRK ' language system, with appropriate mappings directly in a lookup for the 'smcp' feature or in concert with the 'locl' feature. Also, some applications may handle language-specific case mappings by mapping the lowercase characters to appropriate uppercase characters in a temporary buffer and then applying the 'c2sc' feature. Fonts that implement 'smcp' should also implement the 'c2sc' feature.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.<br/><br/>For best handling of language-specific case mapping behaviors, applications can implement small-cap formatting by mapping lowercase characters to uppercase in a temporary buffer and then applying the 'c2sc' feature. The uppercase mapping can make use of Unicode special-casing data in the Unicode Character Database (SpecialCasing.txt). Lookups for 'smcp' should still be applied to characters that do not have an uppercase mapping, or in the event that a font does not support some uppercased characters using the 'c2sc' feature.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "Used for bicameral scripts (i.e. those with case differences), such as Latin, Greek, Cyrillic, and Armenian.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. Also see 'c2sc'."
  },
  "smpl": {
    "friendlyName": "Simplified Forms",
    "registeredBy": "Adobe",
    "function": "Replaces “traditional” Chinese or Japanese forms with the corresponding “simplified” forms.",
    "example": "The user gets U+53F0 when U+6AAF, U+81FA, or U+98B1 is entered.",
    "implementation": "The 'smpl' table maps each traditional form in a font to a corresponding simplified form (GSUB lookup type 1). Note that more than one traditional form may map to a single simplified form.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. Note: This is a change of character code. Besides the original character code, the application should store the code for the new character.",
    "suggestion": "This feature would be off by default, but could be made the default by a preference setting.",
    "sensitivity": "Used only for Chinese and Japanese.",
    "interaction": "This feature is mutually exclusive with all other features, which should be turned off when it’s applied, except the 'palt', 'vert' and 'vrt2' features, which may be used in addition; 'trad' and 'tnam' are mutally exclusive, and override the results of 'smpl'."
  },
  "ssXX": {
    "friendlyName": "Stylistic Set %NUMBER%",
    "registeredBy": "Tiro Typeworks",
    "function": "In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, e.g. multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Examples of fonts including stylistic sets are Zapfino Linotype and Adobe’s Poetica. Individual features numbered sequentially with the tag name convention 'ss01', 'ss02', 'ss03'… 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indices to default forms and to each other, and for users to select from available stylistic sets.",
    "example": "",
    "implementation": "An 'ssXX' lookup table maps GIDs for default forms to GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose to map only from default forms to variants for each stylistic set, or may choose to map between all stylistic sets in each feature, depending on intended user experience. For example, feature 'ss03' might contain lookups mapping variant glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition to mapping from default forms.<br/><br/>The featureParamsOffset field of the Feature Table of these GSUB features may be set to 0, or to an offset to a Feature Parameters table comprising two successive uint16 values, as follows:<br/><br/>Version (set to 0): This corresponds to a “minor” version number. Additional data may be added to the end of this Feature Parameters table in the future.<br/><br/>UI Name ID: The 'name' table name ID that specifies a string (or strings, for multiple languages) for a user-interface label for this feature. The value of uiLabelNameId is expected to be in the font-specific name ID range (256-32767), though that is not a requirement in this Feature Parameters specification. The user-interface label for the feature can be provided in multiple languages. An English string should be included as a fallback. The string should be kept to a minimal length to fit comfortably with different application interfaces.",
    "interface": "Discretionary features: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature should be off by default. Note that the application is responsible for counting and enumerating the number of features in the font with tag names of the format 'ss01' to 'ss20', and for presenting the user with an appropriate selection mechanism.",
    "sensitivity": "None.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override. Note that after an 'ssXX' feature has been applied, the user may wish to apply glyph-specific features, e.g. 'salt', to individual glyphs in the resulting layout; font developers are responsible for ordering substitution lookups to obtain desired user experience."
  },
  "ssty": {
    "friendlyName": "Math script style alternates",
    "registeredBy": "Microsoft",
    "function": "This feature provides glyph variants adjusted to be more suitable for use in subscripts and superscripts. The script style forms should not be scaled or moved in the font; scaling and moving them is done by the math layout engine. Instead, the 'ssty' feature should provide glyph forms that result in shapes that look good as superscripts and subscripts when scaled and positioned by the Math engine. When designing the script forms, the font developer may assume that MATH.MathConstants.scriptPercentScaleDown and MATH.MathConstants.scriptScriptPercentScaleDown will be the scaling factors used by the Math engine.<br/><br/>This feature can have a parameter indicating the script level: 1 for simple subscripts and superscripts, 2 for second level subscripts and superscripts (that is, scripts on scripts), and so on. (Currently, only the first two alternates are used). For glyphs that are not covered by this feature, the original glyph is used in subscripts and superscripts.",
    "example": "In the formula “letter a with level 1 superscript b and level 2 superscript c”, the glyph for the letter b will be substituted with a script level 1 variant, and the glyph for the letter c will be substituted with a script level 2 variant.",
    "implementation": "Alternate substitution, with parameter 1 or 2 corresponding to sub- or super-script level alternate glyphs. If there are no second-level alternates defined in the font, single substitution may also be used. Glyphs that don’t have script alternates can be omitted from this table. See the MATH table specification for details.",
    "interface": "In recommended usage, this feature is used to trigger substitutions that are required for correct display of math formula. It should be applied in appropriate contexts under the control of a math layout handler. If implemented in a font using an alternate substitution lookup, the first or second alternate glyph should be selected depending on the nesting level within the math formula. See the 'MATH' table chapter for additional information.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for math formula layout.",
    "interaction": "This feature is applied to individual glyphs during layout of math formula."
  },
  "stch": {
    "friendlyName": "Stretching Glyph Decomposition",
    "registeredBy": "Microsoft",
    "function": "Unicode characters, such as the Syriac Abbreviation Mark (U+070F), that enclose other characters need to be able to stretch in order to dynamically adapt to the width of the enclosed text. This feature defines a decomposition set consisting of an odd number of glyphs which describe the stretching glyph. The odd numbered glyphs in the decomposition are fixed reference points which are distributed evenly from the start to the end of the enclosed text. The even numbered glyphs may be repeated as necessary to fill the space between the fixed glyphs. The first and last glyphs may either be simple glyphs with width at the baseline, or mark glyphs. All other decomposition glyphs should have width, but must be defined as mark glyphs.",
    "example": "In Syriac, the character 0x070F is a control character that is rendered as a line above an abbreviation in Syriac script. The line should have a circle at each end and at the mid point. The decomposition sequence for this character should consist of a circle at the start of a line, a connecting line, a circle on a line for the mid point, a second connecting line, and a circle at the end of the line. The connecting lines will repeat in order to fill the space between the circle glyphs.",
    "implementation": "The default glyph for a character that requires stretching is mapped to a sequence comprised of an odd number of corresponding glyphs (GSUB lookup type 2).",
    "interface": "For characters that require stretching, such as Syriac abbreviation mark (U+070F), the 'stch' feature is applied. If the default glyph for the character is in the coverage of an associated lookup subtable, the mapped glyph sequence is retrieved. The last glyph of the substitute sequence is reordered to the end of the sequence of glyphs to be enclosed or encompassed. The remaining glyphs from the substitution sequence are inserted before the sequence of glyphs to be enclosed. Odd-numbered glyphs in the substitution sequence are positioned so as to be distributed evenly over the width of text being enclosed. Even-numbered glyphs are repeated so that the spaces between the odd-numbered glyphs is filled.",
    "suggestion": "Control of this feature should not generally be exposed to the user.",
    "sensitivity": "None",
    "interaction": "None"
  },
  "subs": {
    "friendlyName": "Subscript",
    "registeredBy": "Microsoft/Adobe",
    "function": "The 'subs' feature may replace a default glyph with a subscript glyph, or it may combine a glyph substitution with positioning adjustments for proper placement.",
    "example": "",
    "implementation": "First, a single or contextual substitution lookup implements the subscript glyph (GSUB lookup type 1). Then, if the glyph needs repositioning, a single adjustment, pair adjustment, or contextual adjustment positioning lookup is used to modify its position (GPOS lookup type 1 or type 2, or a contextual lookup that references a type 1 or type 2 lookup).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. Note: This is a change of semantic value. Besides the original character codes, the application should store the code for the new character.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "None.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override."
  },
  "sups": {
    "friendlyName": "Superscript",
    "registeredBy": "Microsoft/Adobe",
    "function": "Replaces lining or oldstyle figures with superior figures (primarily for footnote indication), and replaces lowercase letters with superior letters (primarily for abbreviated French titles).",
    "example": "The application can use this feature to automatically access the superior figures (more legible than scaled figures) for footnotes, or the user can apply it to Mssr to get the classic form.",
    "implementation": "The 'sups' table maps figures and lowercase letters to the corresponding superior forms (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. Note: This can include a change of semantic value. Besides the original character codes, the application should store the code for the new character.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "None.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override."
  },
  "swsh": {
    "friendlyName": "Swash",
    "registeredBy": "Microsoft/Adobe",
    "function": "This feature replaces default character glyphs with corresponding swash glyphs. Note that there may be more than one swash alternate for a given character.",
    "example": "The user inputs the ampersand character when setting text with Poetica with this feature active, and is presented with a choice of the 63 ampersand forms in that face.",
    "implementation": "The 'swsh' table maps GIDs for default forms to those for one or more corresponding swash forms. While many of these substitutions are one-to-one (GSUB lookup type 1), others require a selection from a set (GSUB lookup type 3). The manufacturer may choose to build two tables (one for each lookup type) or only one which uses lookup type 3 for all substitutions. If several styles of swash are present across the font, the set of forms for each character should be ordered consistently.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. If implemented in a font using an alternate substitution lookup, the application selects one of the alternative glyphs based on user choice or other criteria.",
    "suggestion": "This feature should be inactive by default. When implemented in the font using an alternate substitution lookup, an application could display the alternate forms sequentially in context, or present a palette showing all the forms at once, or give the user a choice between these approaches. The application may assume that the first glyph in a set is the preferred form, so the font developer should order them accordingly.",
    "sensitivity": "Not used for ideographic scripts.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override."
  },
  "titl": {
    "friendlyName": "Titling",
    "registeredBy": "Adobe",
    "function": "This feature replaces the default glyphs with corresponding forms designed specifically for titling. These may be all-capital and/or larger on the body, and adjusted for viewing at larger sizes.",
    "example": "The user applies this feature in Adobe Garamond to get the titling caps.",
    "implementation": "The 'titl' table maps default forms to corresponding titling forms (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "None.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override."
  },
  "tjmo": {
    "friendlyName": "Trailing Jamo Forms",
    "registeredBy": "Microsoft",
    "function": "Substitutes the trailing jamo form of a cluster.",
    "example": "In Hangul script, the jamo cluster is composed of three parts (leading consonant, vowel, and trailing consonant). When a sequence of trailing class jamos are found, their combined trailing jamo form is substituted.",
    "implementation": "The default glyph for a trailing jamo is mapped into an alternate form required for conjoining in a syllable (GSUB lookup type 1, or a contextual substitution referencing a type 1 lookup.",
    "interface": "In recommended usage, this feature triggers substitutions required for correct layout of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of this feature should not generally be exposed to the user.",
    "sensitivity": "Used for Hangul script, particularly when Unicode conjoining jamo characters are used.",
    "interaction": "This feature overrides the results of all other features."
  },
  "tnam": {
    "friendlyName": "Traditional Name Forms",
    "registeredBy": "Adobe",
    "function": "Replaces “simplified” Japanese kanji forms with the corresponding “traditional” forms. This is equivalent to the Traditional Forms feature, but explicitly limited to the traditional forms considered proper for use in personal names (as many as 205 glyphs in some fonts).",
    "example": "The user inputs U+4E9C and gets U+4E9E.",
    "implementation": "The 'tnam' table maps simplified forms in a font to corresponding traditional forms which can be used in personal names (GSUB lookup type 1). The application stores a record of any simplified forms which resulted from substitutions (the 'smpl' feature); for such forms, applying the 'tnam' feature undoes the previous substitution.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. Note: This is a change of character code. Besides the original character code, the application should store the code for the new character.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "Used only for Japanese.",
    "interaction": "May include some characters affected by the Proportional Alternate Widths feature ('palt'); 'trad' and 'tnam' are mutually exclusive, and override the results of 'smpl'."
  },
  "tnum": {
    "friendlyName": "Tabular Figures",
    "registeredBy": "Adobe",
    "function": "Replaces figure glyphs set on proportional widths with corresponding glyphs set on uniform (tabular) widths. Tabular widths will generally be the default, but this cannot be safely assumed. Of course this feature would not be present in monospaced designs.",
    "example": "The user may apply this feature to get oldstyle figures to align vertically in a column.",
    "implementation": "In order to simplify associated kerning and get the best glyph design for a given width, this feature should use new glyphs for the figures, rather than only adjusting the fit of the proportional glyphs (although some may be simple copies); i.e. not a GPOS feature. The 'tnum' table maps proportional versions of lining &/or oldstyle figures to corresponding tabular glyphs (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature should be off by default. The application may want to query the user about this feature when the user changes figure style ('onum' or 'lnum').",
    "sensitivity": "None.",
    "interaction": "This feature overrides the results of the Proportional Figures feature ('pnum')."
  },
  "trad": {
    "friendlyName": "Traditional Forms",
    "registeredBy": "Adobe",
    "function": "Replaces 'simplified' Chinese hanzi or Japanese kanji forms with the corresponding 'traditional' forms.",
    "example": "The user inputs U+53F0 and is offered a choice of U+6AAF, U+81FA, or U+98B1.",
    "implementation": "The 'trad' table maps each simplified form in a font to one or more traditional forms. While many of these substitutions are one-to-one (GSUB lookup type 1), others require a selection from a set (GSUB lookup type 3). The manufacturer may choose to build two tables (one for each lookup type) or only one which uses lookup type 3 for all substitutions. As in any one-from-many substitution, alternates present in more than one face should be ordered consistently across a family, so that those alternates can work correctly when switching between family members.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria. If implemented in a font using an alternate substitution lookup, the application selects one of the alternative glyphs based on user choice or other criteria. The application stores a record of any simplified forms which resulted from substitutions (the 'smpl' feature); for such forms, applying the 'trad' feature undoes the previous substitution. Note: This is a change of character code. Besides the original character code, the application should store the code for the new character.",
    "suggestion": "This feature should be inactive by default. If there’s no record of a conversion from traditional to simplified, the user must be offered a set of possibilities from which to select. The application may note the user’s choice, and offer it as a default the next time the source simplified character is encountered. In the absence of such prior information, the application may assume that the first glyph in a set is the preferred form, so the font developer should order them accordingly.",
    "sensitivity": "Used only for Chinese and Japanese.",
    "interaction": "May include some characters affected by the Proportional Alternate Widths feature ('palt'); 'trad' and 'tnam' are mutually exclusive, and override the results of 'smpl'."
  },
  "twid": {
    "friendlyName": "Third Widths",
    "registeredBy": "Adobe",
    "function": "Replaces glyphs on other widths with glyphs set on widths of one third of an em. The characters involved are normally figures and some forms of punctuation.",
    "example": "The user may apply 'twid' to place a three-digit figure in a single slot in a column of vertical text.",
    "implementation": "The font may contain alternate glyphs designed to be set on third-em widths (GSUB lookup type 1), or it may specify alternate metrics for the original glyphs (GPOS lookup type 1) which adjust their spacing to fit in third-em widths.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature would normally be off by default.",
    "sensitivity": "Generally used only in CJKV fonts.",
    "interaction": "This feature is mutually exclusive with all other glyph-width features (e.g. 'fwid', 'halt', 'hwid' and 'qwid'), which should be turned off when it’s applied. It deactivates the 'kern' feature."
  },
  "unic": {
    "friendlyName": "Unicase",
    "registeredBy": "Tiro Typeworks / Emigre",
    "function": "This feature maps upper- and lowercase letters to a mixed set of lowercase and small capital forms, resulting in a single case alphabet (for an example of unicase, see the Emigre type family Filosofia). The letters substituted may vary from font to font, as appropriate to the design. If aligning to the x-height, smallcap glyphs may be substituted, or specially designed unicase forms might be used. Substitutions might also include specially designed figures.",
    "example": "The user enters text as uppercase, lowercase or mixed case, and gets unicase text.",
    "implementation": "Uppercase and lowercase glyphs are mapped to corresponding unicase forms (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature should be off by default.",
    "sensitivity": "Used for bicameral scripts (i.e. those with case differences), such as Latin, Greek, Cyrillic, and Armenian.",
    "interaction": "This feature may be used in combination with other substitution (GSUB) features, whose results it may override."
  },
  "valt": {
    "friendlyName": "Alternate Vertical Metrics",
    "registeredBy": "Adobe",
    "function": "Repositions glyphs to visually center them within full-height metrics, for use in vertical setting. Applies to full-width Latin, Greek, or Cyrillic glyphs, which are typically included in East Asian fonts, and whose glyphs are aligned on a common horizontal baseline and not rotated relative to the page or text frame.",
    "example": "Applying this feature would shift a Roman h down, or y up, from their default full-width positions.",
    "implementation": "The font specifies alternate metrics for the original glyphs (GPOS lookup type 1, YPlacement).<br/><br/>Note: The same functionality can be accomplished by setting glyph vertical origins through the use of appropriate topSideBearing values in the 'vmtx' table and (only for fonts with CFF outlines) corresponding vertOriginY values in the 'VORG' table. This method is recommended as it provides the desired spacing for vertical layout by default. Fonts that include 'vmtx'/'VORG' tables should not implement this feature.",
    "interface": "Should be applied to runs of characters for applicable scripts in vertical text layout.",
    "suggestion": "This feature should be active by default in vertical-setting contexts.",
    "sensitivity": "Used for scripts with vertical writing modes.",
    "interaction": "This feature is mutually exclusive with all other glyph-height features (e.g. 'vhal' and 'vpal'), which should be turned off when it’s applied. It deactivates the 'kern' feature."
  },
  "vatu": {
    "friendlyName": "Vattu Variants",
    "registeredBy": "Microsoft",
    "function": "In an Indic consonant conjunct, substitutes a ligature glyph for a base consonant and a following vattu (below-base) form of a conjoining consonant, or for a half form of a consonant and a following vattu form.",
    "example": "In the Devanagari script, the consonant Ra takes a vattu form, when it is not the syllable initial consonant in a conjunct. This vattu form ligates with the base consonant as well as half forms of consonants.",
    "implementation": "The 'vatu' table maps consonant and vattu form combinations to their respective ligatures (GSUB lookup type 4).<br/><br/>Lookups associated with the Vattu Variants feature apply to glyphs derived using the Below-base Forms feature and (for half-form plus vattu ligatures) the Half Forms features. The Below-base Forms feature should be used to derive the nominal vattu form of a consonant; the Vattu Variants feature should only be used to substitute the nominal vattu form and a base consonant or half form with a ligature glyph. If the Rakar Forms feature is used, the Vattu Variants feature is not required.",
    "interface": "In recommended usage, this feature triggers substitutions required for correct layout of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Devanagari and other Indic or Brahmi-derived scripts.",
    "interaction": "This feature may be used in conjunction with certain other features — 'nukt', 'akhn', 'rphf', 'rkrf', 'pref', 'blwf', 'half', 'pstf', 'cjct' — to derive required forms of Indic scripts. For Indic script implementations that use the Vattu Variants feature, the application is expected to process this and the other features in an appropriate order to obtain the correct basic forms. Other discretionary features for optional typographic effects may also be applied. Lookups for such discretionary features should be processed after lookups for this feature have been processed."
  },
  "vchw": {
    "friendlyName": "Vertical Contextual Half-width Spacing",
    "registeredBy": "Adobe/W3C",
    "function": "Contextually re-spaces glyphs designed to be set on full-em heights, fitting them onto individual half-width vertical heights, to approximate more sophisticated text layout, such as what is described in Requirements for Japanese Text Layout (JLREQ) or similar CJK text-layout specifications that expect half-width forms of characters whose default glyphs are full-width.* This differs from 'vhal' in that the re-spacing is contextual. This feature may be invoked to get better fit for punctuation or symbol glyphs without disrupting the monospaced alignment.<br/><br/>* In JLREQ, see, in particular, 3.1.4 Positioning of Consecutive Opening Brackets, Closing Brackets, Commas, Full Stops and Middle Dots and B. Spacing between Characters. See also Requirements for Chinese Text Layout (CLREQ), Requirements for Hangul Text Layout (KLREQ).",
    "example": "When PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS (U+FE36; “︶”, vertical form of FULLWIDTH RIGHT PARENTHESIS U+FF09; “)”) is followed by PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA (U+FE11; “︑”, vertical form of IDEOGRAPHIC COMMA U+3001; “、”), the former is re-spaced to remove half-em of height between them.",
    "implementation": "The font stores a set of adjustments for pairs of glyphs (GPOS lookup type 2 or 8, XPlacement, XAdvance, YPlacement, and YAdvance). These may be stored as one or more tables matching left and right classes, and/or as individual pairs. Additional adjustments may be provided for larger sets of glyphs (e.g. triplets, quadruplets, etc.) to overwrite the results of pair kerns in particular combinations.<br/><br/>Note: When using a GPOS type 2 lookup for this feature, it is recommended that no positioning adjustment be applied to the second glyph in a pair. (That is, that valueFormat2 be set to 0.) As a result, the next glyph pair to be processed after the lookup has been applied to this pair will start at the second glyph. In this way, every glyph in a sequence can undergo positioning adjustment as the first glyph in a pair. Otherwise, if positioning of the second glyph is adjusted, then the next glyph pair to be processed will begin with the glyph following the second glyph. That will result in spacing adjustment happening only for every other pair of glyphs.",
    "interface": "If a layout engine supports advanced layout for CJK text as described in CLREQ, JLREQ or KLREQ, this feature should not be used. Otherwise, this feature should always be applied in vertical layout of CJK text.",
    "suggestion": "This feature should not be used in combination with a layout engine that independently provides advanced layout as described in CLREQ, JLREQ or KLREQ. For applications that provide such advanced layout, it may appropriate not to expose control of this feature to users. In applications that do not support such advanced layout, this feature should be enabled by default for vertical layout of CJK text.",
    "sensitivity": "Used mostly in CJKV fonts.",
    "interaction": "This feature is mutually exclusive with all other glyph-height features (e.g., 'valt', 'vhal', 'vpal'), which should be turned off when this feature is applied. It deactivates the 'vkrn' feature. See also 'chws'."
  },
  "vert": {
    "friendlyName": "Vertical Alternates",
    "registeredBy": "Microsoft/Adobe",
    "function": "Transforms default glyphs into glyphs that are appropriate for upright presentation in vertical writing mode. While the glyphs for most characters in East Asian writing systems remain upright when set in vertical writing mode, some must be transformed — usually by rotation, shifting, or different component ordering — for vertical writing mode.",
    "example": "In vertical writing mode, the opening parenthesis (U+FF08) is replaced by the rotated form (U+FE35).<br/><br/>In vertical writing mode, the glyph for HIRAGANA LETTER SMALL A (U+3041 “ぁ”) is transformed into a glyph that is shifted up and to the right, which is properly positioned for upright presentation in vertical writing mode.<br/><br/>In vertical writing mode, the glyph for SQUARE MAIKURO (U+3343 “㍃”), whose component katakana characters are ordered from left to right then top to bottom (like horizontal writing mode), is transformed into a glyph whose component katakana characters are ordered from top to bottom then right to left (like vertical writing mode line progression).",
    "implementation": "The font includes versions of the glyphs covered by this feature that differ in some visual way from the default glyphs, such as by rotation, shifting, or different component ordering. The 'vert' feature maps the default glyphs to the corresponding, alternate glyphs for vertical writing mode using a type 1 (single substitution) GSUB lookup.",
    "interface": "Should be applied to runs of characters for applicable scripts in vertical text layout.",
    "suggestion": "This feature should be active by default in vertical writing mode.",
    "sensitivity": "Used for scripts with vertical writing modes.",
    "interaction": "The 'vert' and 'vrtr' features are intended to be used in conjunction: 'vert' for glyphs to be presented upright in vertical writing, and 'vrtr' for glyphs intended to be presented sideways. Since they must never be activated simultaneously for a given glyph, there should be no interaction between the two features. These features are intended for layout engines that graphically rotate glyphs for sideways runs in vertical writing mode, such as those conforming to Unicode Technical Report #50: Unicode Vertical Text Layout.<br/><br/>Note that layout engines that instead depend on the font to supply pre-rotated glyphs for all sideways glyphs should use the 'vrt2' feature in lieu of 'vert' and 'vrtr'. Because 'vrt2' supplies pre-rotated glyphs, the 'vert' feature should never be used with 'vrt2', but it may be used in addition to any other feature."
  },
  "vhal": {
    "friendlyName": "Alternate Vertical Half Metrics",
    "registeredBy": "Adobe",
    "function": "Re-spaces glyphs designed to be set on full-em heights, fitting them onto half-em heights. This differs from 'valt', which repositions a glyph but does not affect its advance.",
    "example": "The user may invoke this feature in a CJKV font to get better fit for punctuation or symbol glyphs without disrupting the monospaced alignment.",
    "implementation": "The font specifies alternate metrics for the full-height glyphs (GPOS lookup type 1, XPlacement, XAdvance, YPlacement and YAdvance).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "In general, this feature should be off by default. Different behavior should be used, however, in applications that conform to Requirements for Japanese Text Layout (JLREQ) or similar CJK text-layout specifications that expect half-width forms of characters whose default glyphs are full-width. Such implementations should turn this feature on by default, or should selectively apply this feature to particular characters that require special treatment for CJK text-layout purposes, such as brackets, punctuation, and quotation marks.",
    "sensitivity": "Used only in CJKV fonts.",
    "interaction": "This feature is mutually exclusive with all other glyph-height features (e.g., 'valt' and 'vpal'), which should be turned off when this feature is applied. It deactivates the 'kern' feature. See also 'halt'."
  },
  "vjmo": {
    "friendlyName": "Vowel Jamo Forms",
    "registeredBy": "Microsoft",
    "function": "Substitutes the vowel jamo form of a cluster.",
    "example": "In Hangul script, the jamo cluster is composed of three parts (leading consonant, vowel, and trailing consonant). When a sequence of vowel class jamos are found, their combined vowel jamo form is substituted.",
    "implementation": "The default glyph for a vowel jamo is mapped into an alternate form required for conjoining in a syllable (GSUB lookup type 1, or a contextual substitution that references a type 1 lookup).",
    "interface": "In recommended usage, this feature triggers substitutions required for correct layout of certain scripts. It should be applied in the appropriate contexts, as determined by script-specific processing requirements.",
    "suggestion": "Control of the feature should not generally be exposed to the user.",
    "sensitivity": "Used for Hangul script, particularly when Unicode conjoining jamo characters are used.",
    "interaction": "This feature overrides the results of all other features."
  },
  "vkna": {
    "friendlyName": "Vertical Kana Alternates",
    "registeredBy": "Adobe",
    "function": "Replaces standard kana with forms that have been specially designed for only vertical writing. This is a typographic optimization for improved fit and more even color. Also see 'hkna'.",
    "example": "Standard full-width kana (hiragana and katakana) are replaced by forms that are designed for vertical use.",
    "implementation": "The font includes a set of specially-designed glyphs, listed in the 'vkna' coverage table. The 'vkna' feature maps the standard full-width forms to the corresponding special vertical forms (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature would be off by default.",
    "sensitivity": "Used only for Hiragana and Katakana.",
    "interaction": "Since this feature is only for vertical use, features applying to horizontal behaviors (e.g. 'kern') do not apply."
  },
  "vkrn": {
    "friendlyName": "Vertical Kerning",
    "registeredBy": "Adobe",
    "function": "Adjusts amount of space between glyphs, generally to provide optically consistent spacing between glyphs. Although a well-designed typeface has consistent inter-glyph spacing overall, some glyph combinations require adjustment for improved legibility. Besides standard adjustment in the vertical direction, this feature can supply size-dependent kerning data via device tables, “cross-stream” kerning in the X text direction, and adjustment of glyph placement independent of the advance adjustment. Note that this feature may apply to runs of more than two glyphs, and would not be used in monospaced fonts. Also note that this feature applies only to text set vertically.",
    "example": "When the katakana character U+30B9 or U+30D8 is followed by U+30C8 in a vertical setting, U+30C8 is shifted up to fit more evenly.",
    "implementation": "The font stores a set of adjustments for pairs of glyphs (GPOS lookup type 2 or 8). These may be stored as one or more tables matching left and right classes, and/or as individual pairs. Additional adjustments may be provided for larger sets of glyphs (e.g. triplets, quadruplets, etc.) to overwrite the results of pair kerns in particular combinations.<br/><br/>Note: When using a GPOS type 2 lookup for this feature, it is recommended that no positioning adjustment be applied to the second glyph in a pair. (That is, that valueFormat2 be set to 0.) As a result, the next glyph pair to be processed after the lookup has been applied to this pair will start at the second glyph. In this way, every glyph in a sequence can undergo positioning adjustment as the first glyph in a pair. Otherwise, if positioning of the second glyph is adjusted, then the next glyph pair to be processed will begin with the glyph following the second glyph. That will result in kerning adjustment happening only for every other pair of glyphs.",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature should be active by default for vertical text setting. Applications may wish to allow users to add further manually-specified adjustments to suit specific needs and tastes.",
    "sensitivity": "None",
    "interaction": "If 'vkrn' is activated, 'vpal' must also be activated if it exists. If 'vpal' is activated, there is no requirement that 'vkrn' must also be activated. May be used in addition to any other feature except those which result in fixed (uniform) advance heights."
  },
  "vpal": {
    "friendlyName": "Proportional Alternate Vertical Metrics",
    "registeredBy": "Adobe",
    "function": "Re-spaces glyphs designed to be set on full-em heights, fitting them onto individual (more or less proportional) vertical heights. This differs from 'valt', which repositions a glyph but does not affect its advance.",
    "example": "The user may invoke this feature in a Japanese font to get Latin, Kanji, Kana or Symbol glyphs with the full-height design but individual metrics.",
    "implementation": "The font specifies alternate heights for the full-height glyphs (GPOS lookup type 1, XPlacement, XAdvance, YPlacement and YAdvance).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "This feature would be off by default.",
    "sensitivity": "Used mostly in CJKV fonts.",
    "interaction": "This feature is mutually exclusive with all other glyph-height features (e.g. 'valt' and 'vhal'), which should be turned off when it’s applied. If 'vpal' is activated, there is no requirement that 'vkrn' must also be activated. If 'vkrn' is activated, 'vpal' must also be activated if it exists. See also 'palt'."
  },
  "vrt2": {
    "friendlyName": "Vertical Alternates and Rotation",
    "registeredBy": "Adobe",
    "function": "Replaces some fixed-width (half-, third- or quarter-width) or proportional-width glyphs (mostly Latin or katakana) with forms suitable for vertical writing (that is, rotated 90 degrees clockwise). Note that these are a superset of the glyphs covered in the 'vert' table.<br/><br/>ATM/NT 4.1 and the Windows 2000 OTF driver impose the following requirements for an OpenType font with CFF outlines to be used for vertical writing: the 'vrt2' feature must be present in the GSUB table, it must comprises a single lookup of LookupType 1 and LookupFlag 0, and the lookup must have a single subtable. The predecessor feature, 'vert', is ignored.<br/><br/>A rotated glyph must be designed such that its top side bearing and vertical advance as recorded in the Vertical Metrics ('vmtx') table are identical to the left side bearing and horizontal advance, respectively, of the corresponding upright glyph as recorded in the Horizontal Metrics ('hmtx') table. (The horizontal advance of the rotated glyph may be set to any value, since the glyph is intended only for vertical writing use. The vendor may however set it to head.unitsPerEm, to prevent overlap during font proofing tests, for example.)<br/><br/>Thus, proportional-width glyphs with rotated forms in the 'vrt2' feature will appear identically spaced in both vertical and horizontal writing. In order for kerning to produce identical results as well, developers must ensure that the Vertical Kerning ('vkrn') feature record kern values between the rotated glyphs that are the same as kern values between their corresponding upright glyphs in the Kerning ('kern') feature.",
    "example": "Proportional- or half-width Latin and half-width katakana characters are rotated 90 degrees clockwise for vertical writing.",
    "implementation": "The font includes rotated versions of the glyphs covered by this feature. The 'vrt2' table maps the standard (horizontal) forms to the corresponding vertical (rotated) forms (GSUB lookup type 1). This feature should be the last substitution in the font, and take input from other features.",
    "interface": "Discretionary feature: can be applied to glyph runs in vertical text layout based on document markup, user control or other application criteria.",
    "suggestion": "This feature should be active by default when vertical writing mode is on, although the user must be able to override it.",
    "sensitivity": "Used for scripts with vertical writing modes.",
    "interaction": "Overrides the 'vert' (Vertical Writing) feature, which is a subset of this one. May be used in addition to any other feature."
  },
  "vrtr": {
    "friendlyName": "Vertical Alternates for Rotation",
    "registeredBy": "Adobe/Microsoft/W3C",
    "function": "Transforms default glyphs into glyphs that are appropriate for sideways presentation in vertical writing mode. While the glyphs for most characters in East Asian writing systems remain upright when set in vertical writing mode, glyphs for other characters — such as those of other scripts or for particular Western-style punctuation — are expected to be presented sideways in vertical writing.",
    "example": "As a first example, the glyphs for FULLWIDTH LESS-THAN SIGN (U+FF1C “＜”) and FULLWIDTH GREATER-THAN SIGN (U+FF1E “＞”) in a font with a non-square em-box are transformed into glyphs whose aspect ratio differs from the default glyphs, which are properly sized for sideways presentation in vertical writing mode. As a second example, the glyph for LEFT SQUARE BRACKET (U+005B, “[”) in a brush-script font that exhibits slightly rising horizontal strokes may use an obtuse angle for its upper-left corner when in horizontal writing mode, but an alternate glyph with an acute angle for that corner is supplied for vertical writing mode.",
    "implementation": "The font includes versions of the glyphs covered by this feature that, when rotated 90 degrees clockwise by the layout engine for sideways presentation in vertical writing, differ in some visual way from rotated versions of the default glyphs, such as by shifting or shape. The 'vrtr' feature maps the default glyphs to the corresponding to-be-rotated glyphs (GSUB lookup type 1).",
    "interface": "Should be applied to applicable characters in vertical text layout.",
    "suggestion": "This feature should always be active by default for sideways runs in vertical writing mode.",
    "sensitivity": "Applies to any script when set in vertical writing mode.",
    "interaction": "The 'vrtr' and 'vert' features are intended to be used in conjunction: 'vrtr' for glyphs intended to be presented sideways in vertical writing, and 'vert' for glyphs to be presented upright. Since they must never be activated simultaneously for a given glyph, there should be no interaction between the two features. These features are intended for layout engines that graphically rotate glyphs for sideways runs in vertical writing mode, such as those conforming to Unicode Technical Report #50: Unicode Vertical Text Layout.<br/><br/>Note that layout engines that instead depend on the font to supply pre-rotated glyphs for all sideways glyphs should use the 'vrt2' feature in lieu of 'vrtr' and 'vert'. Because 'vrt2' supplies pre-rotated glyphs, the 'vrtr' feature should never be used with 'vrt2', but it may be used in addition to any other feature."
  },
  "zero": {
    "friendlyName": "Slashed Zero",
    "registeredBy": "Adobe",
    "function": "Some fonts contain both a default form of zero, and an alternative form which uses a diagonal slash through the counter. Especially in condensed designs, it can be difficult to distinguish between 0 and O (zero and capital O) in any situation where capitals and lining figures may be arbitrarily mixed. This feature allows the user to change from the default 0 to a slashed form.",
    "example": "When setting labels, the user applies this feature to get the slashed 0.",
    "implementation": "The 'zero' table maps the GIDs for the lining forms of zero to corresponding slashed forms (GSUB lookup type 1).",
    "interface": "Discretionary feature: can be applied to glyph runs based on document markup, user control or other application criteria.",
    "suggestion": "Optimally, the application would store this as a preference setting, and the user could use the feature to toggle back and forth between the two forms. Most applications will want the default setting to disable this feature.",
    "sensitivity": "Used only for 0.",
    "interaction": "Applies only to lining figures, so is inactivated by oldstyle figure features (e.g. 'onum')."
  }
}
